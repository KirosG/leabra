// ta_Dump File v3.0 -- code v8.1.1.0 rev11060
LeabraProject .projects[0] { 
 Doc_Group @.docs = [0] {
 };

 Wizard_Group @.wizards = [1] {
  LeabraWizard @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };
  };
 };

 ControlPanel_Group @.ctrl_panels = [2] {
  ControlPanel @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
   };

   ControlPanelMember_Group @.mbrs = [10] {
    ControlPanelMember @[0] { };
    ControlPanelMember @[1] { };
    ControlPanelMember @[2] { };
    ControlPanelMember @[3] { };
    ControlPanelMember @[4] { };
    ControlPanelMember @[5] { };
    ControlPanelMember @[6] { };
    ControlPanelMember @[7] { };
    ControlPanelMember @[8] { };
    ControlPanelMember @[9] { };
    ControlPanelMember_Group @.gp[0] = [3] { 
     ControlPanelMember @[0] { };
     ControlPanelMember @[1] { };
     ControlPanelMember @[2] { };
    };
    ControlPanelMember_Group @.gp[1] { 
    };
   };

   ControlPanelMethod_Group @.mths = [6] {
    ControlPanelMethod @[0] { };
    ControlPanelMethod @[1] { };
    ControlPanelMethod @[2] { };
    ControlPanelMethod @[3] { };
    ControlPanelMethod @[4] { };
    ControlPanelMethod @[5] { };
   };
  };
  ClusterRun @[1] { 
   ControlPanelMember_Group @.mbrs = [0] {
   };

   ControlPanelMethod_Group @.mths = [0] {
   };

   ParamSearchAlgo_List @.search_algos = [0] {
   };
  };
 };

 ParamSet_Group @.active_params = [0] {
 };

 ArchivedParams_Group @.archived_params = [0] {
 };

 DataTable_Group @.data = [0] {
  DataTable_Group @.gp[0] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [2] {
     String_Data @[0] { };
     float_Data @[1] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[1] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [13] {
     int_Data @[0] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
     float_Data @[1] { };
     float_Data @[2] { };
     float_Data @[3] { };
     float_Data @[4] { };
     float_Data @[5] { };
     float_Data @[6] { };
     float_Data @[7] { };
     float_Data @[8] { };
     float_Data @[9] { };
     float_Data @[10] { };
     float_Data @[11] { };
     float_Data @[12] { };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
  DataTable_Group @.gp[2] = [1] { 
   DataTable @[0] { 
    DataTableCols @.data = [3] {
     float_Data @[0] { };
     float_Data @[1] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
       UserDataItem @[1] { };
       UserDataItem @[2] { };
      };
     };
     float_Data @[2] { 
      UserDataItem_List @*(.user_data_) {
       UserDataItem @[0] { };
      };
     };
    };

    DataOpList @.last_sort_spec.ops = [0] {
    };
   };
  };
 };

 Program_TopGroup @.programs = [3] {
  Program @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [15] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
    ProgVar @[13] { };
    ProgVar @[14] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [15] {
    MemberAssign @[0] { };
    MemberAssign @[1] { };
    MemberAssign @[2] { };
    MemberAssign @[3] { };
    MemberAssign @[4] { };
    MemberAssign @[5] { };
    MemberAssign @[6] { };
    MemberAssign @[7] { };
    MemberAssign @[8] { };
    MemberAssign @[9] { };
    MemberAssign @[10] { };
    MethodCall @[11] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[12] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[13] { 
     ProgArg_List @.meth_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    MethodCall @[14] { 
     ProgArg_List @.meth_args = [0] {
     };
    };
   };
  };
  Program @[1] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [2] {
    DataTable @[0] { 
     DataTableCols @.data = [4] {
      float_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
    DataTable @[1] { 
     DataTableCols @.data = [4] {
      float_Data @[0] { };
      float_Data @[1] { };
      float_Data @[2] { };
      float_Data @[3] { };
     };

     DataOpList @.last_sort_spec.ops = [0] {
     };
    };
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [1] {
    ProgVar @[0] { };
   };

   ProgVar_List @.vars = [13] {
    ProgVar @[0] { };
    ProgVar @[1] { };
    ProgVar @[2] { };
    ProgVar @[3] { };
    ProgVar @[4] { };
    ProgVar @[5] { };
    ProgVar @[6] { };
    ProgVar @[7] { };
    ProgVar @[8] { };
    ProgVar @[9] { };
    ProgVar @[10] { };
    ProgVar @[11] { };
    ProgVar @[12] { };
   };

   Function_List @.functions = [1] {
    Function @[0] { 
     ProgVar_List @.args = [1] {
      ProgVar @[0] { };
     };

     ProgEl_List @.fun_code = [9] {
      LocalVars @[0] { 
       ProgVar_List @.local_vars = [6] {
	ProgVar @[0] { };
	ProgVar @[1] { };
	ProgVar @[2] { };
	ProgVar @[3] { };
	ProgVar @[4] { };
	ProgVar @[5] { };
       };
      };
      AssignExpr @[1] { };
      AssignExpr @[2] { };
      AssignExpr @[3] { };
      AssignExpr @[4] { };
      If @[5] { 
       ProgEl_List @.true_code = [1] {
	AssignExpr @[0] { };
       };
      };
      Else @[6] { 
       ProgEl_List @.true_code = [1] {
	AssignExpr @[0] { };
       };
      };
      AssignExpr @[7] { };
      ReturnExpr @[8] { };
     };
    };
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [9] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [6] {
      ProgVar @[0] { };
      ProgVar @[1] { };
      ProgVar @[2] { };
      ProgVar @[3] { };
      ProgVar @[4] { };
      ProgVar @[5] { };
     };
    };
    AssignExpr @[1] { };
    MemberAssign @[2] { };
    ResetDataRows @[3] { };
    ForLoop @[4] { 
     ProgEl_List @.loop_code = [2] {
      MemberAssign @[0] { };
      ForLoop @[1] { 
       ProgEl_List @.loop_code = [12] {
	ResetDataRows @[0] { };
	MemberAssign @[1] { };
	ProgramCall @[2] { 
	 ProgArg_List @.prog_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[3] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	ResetDataRows @[4] { };
	MemberAssign @[5] { };
	ProgramCall @[6] { 
	 ProgArg_List @.prog_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	MethodCall @[7] { 
	 ProgArg_List @.meth_args = [2] {
	  ProgArg @[0] { };
	  ProgArg @[1] { };
	 };
	};
	If @[8] { 
	 ProgEl_List @.true_code = [1] {
	  FunctionCall @[0] { 
	   ProgArg_List @.fun_args = [1] {
	    ProgArg @[0] { };
	   };
	  };
	 };
	};
	AddNewDataRow @[9] { };
	DataVarProg @[10] { };
	DoneWritingDataRow @[11] { };
       };
      };
     };
    };
    MemberAssign @[5] { };
    MemberAssign @[6] { };
    ProgramCall @[7] { 
     ProgArg_List @.prog_args = [2] {
      ProgArg @[0] { };
      ProgArg @[1] { };
     };
    };
    DataGroupProg @[8] { 
     DataOpList @.group_spec.ops = [4] {
      DataGroupEl @[0] { };
      DataGroupEl @[1] { };
      DataGroupEl @[2] { };
      DataGroupEl @[3] { };
     };
    };
   };
  };
  Program @[2] { 
   UserDataItem_List @*(.user_data_) {
    UserData_DocLink @[0] { };
   };

   ProgObjList @.objs = [0] {
   };

   ProgVar_List @.objs_vars = [0] {
   };

   ProgType_List @.types = [0] {
   };

   ProgVar_List @.args = [0] {
   };

   ProgVar_List @.vars = [2] {
    ProgVar @[0] { };
    ProgVar @[1] { };
   };

   Function_List @.functions = [0] {
   };

   ProgEl_List @.init_code = [0] {
   };

   ProgEl_List @.prog_code = [2] {
    LocalVars @[0] { 
     ProgVar_List @.local_vars = [0] {
     };
    };
    MethodCall @[1] { 
     ProgArg_List @.meth_args = [4] {
      ProgArg @[0] { };
      ProgArg @[1] { };
      ProgArg @[2] { };
      ProgArg @[3] { };
     };
    };
   };
  };
  Program_Group @.gp[0] = [3] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [13] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [1] {
     ProgVar @[0] { };
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [10] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
     ProgVar @[5] { };
     ProgVar @[6] { };
     ProgVar @[7] { };
     ProgVar @[8] { };
     ProgVar @[9] { };
    };

    Function_List @.functions = [1] {
     Function @[0] { 
      ProgVar_List @.args = [0] {
      };

      ProgEl_List @.fun_code = [9] {
       LocalVars @[0] { 
	ProgVar_List @.local_vars = [0] {
	};
       };
       MethodCall @[1] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
       MethodCall @[2] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[3] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       DataVarProg @[4] { };
       AssignExpr @[5] { };
       DataVarProg @[6] { };
       MethodCall @[7] { 
	ProgArg_List @.meth_args = [0] {
	};
       };
       MethodCall @[8] { 
	ProgArg_List @.meth_args = [1] {
	 ProgArg @[0] { };
	};
       };
      };
     };
    };

    ProgEl_List @.init_code = [2] {
     NetCounterInit @[0] { };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
    };

    ProgEl_List @.prog_code = [14] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[3] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetCounterInit @[6] { };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     WhileLoop @[9] { 
      ProgEl_List @.loop_code = [5] {
       If @[0] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       Else @[1] { 
	ProgEl_List @.true_code = [1] {
	 AssignExpr @[0] { };
	};
       };
       If @[2] { 
	ProgEl_List @.true_code = [4] {
	 CssExpr @[0] { };
	 MethodCall @[1] { 
	  ProgArg_List @.meth_args = [0] {
	  };
	 };
	 CssExpr @[2] { };
	 FunctionCall @[3] { 
	  ProgArg_List @.fun_args = [0] {
	  };
	 };
	};
       };
       Else @[3] { 
	ProgEl_List @.true_code = [2] {
	 ProgramCall @[0] { 
	  ProgArg_List @.prog_args = [2] {
	   ProgArg @[0] { };
	   ProgArg @[1] { };
	  };
	 };
	 FunctionCall @[1] { 
	  ProgArg_List @.fun_args = [0] {
	  };
	 };
	};
       };
       NetCounterIncr @[4] { };
      };
     };
     MethodCall @[10] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[12] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[13] { };
    };
   };
   Program @[1] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [0] {
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [2] {
     ProgVar @[0] { };
     ProgVar @[1] { };
    };

    ProgVar_List @.vars = [1] {
     ProgVar @[0] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [0] {
    };

    ProgEl_List @.prog_code = [13] {
     PrintExpr @[0] { };
     CssExpr @[1] { };
     CssExpr @[2] { };
     CssExpr @[3] { };
     CssExpr @[4] { };
     CssExpr @[5] { };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     CssExpr @[7] { };
     CssExpr @[8] { };
     CssExpr @[9] { };
     CssExpr @[10] { };
     CssExpr @[11] { };
     NetUpdateView @[12] { };
    };
   };
   Program @[2] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     NetMonitor @[0] { 
      NetMonItem_List @.items = [13] {
       NetMonItem @[0] { };
       NetMonItem @[1] { };
       NetMonItem @[2] { };
       NetMonItem @[3] { };
       NetMonItem @[4] { };
       NetMonItem @[5] { };
       NetMonItem @[6] { };
       NetMonItem @[7] { };
       NetMonItem @[8] { };
       NetMonItem @[9] { };
       NetMonItem @[10] { };
       NetMonItem @[11] { };
       NetMonItem @[12] { };
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [4] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [3] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
    };

    ProgEl_List @.prog_code = [9] {
     MethodCall @[0] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     DataVarProg @[3] { };
     AssignExpr @[4] { };
     DataVarProg @[5] { };
     MethodCall @[6] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[7] { 
      ProgArg_List @.meth_args = [1] {
       ProgArg @[0] { };
      };
     };
     MethodCall @[8] { 
      ProgArg_List @.meth_args = [2] {
       ProgArg @[0] { };
       ProgArg @[1] { };
      };
     };
    };
   };
  };
  Program_Group @.gp[1] = [1] { 
   Program @[0] { 
    UserDataItem_List @*(.user_data_) {
     UserData_DocLink @[0] { };
    };

    ProgObjList @.objs = [1] {
     DataTable @[0] { 
      DataTableCols @.data = [2] {
       float_Data @[0] { };
       float_Data @[1] { };
      };

      DataOpList @.last_sort_spec.ops = [0] {
      };
     };
    };

    ProgVar_List @.objs_vars = [0] {
    };

    ProgType_List @.types = [0] {
    };

    ProgVar_List @.args = [1] {
     ProgVar @[0] { };
    };

    ProgVar_List @.vars = [5] {
     ProgVar @[0] { };
     ProgVar @[1] { };
     ProgVar @[2] { };
     ProgVar @[3] { };
     ProgVar @[4] { };
    };

    Function_List @.functions = [0] {
    };

    ProgEl_List @.init_code = [1] {
     NetCounterInit @[0] { };
    };

    ProgEl_List @.prog_code = [15] {
     LocalVars @[0] { 
      ProgVar_List @.local_vars = [3] {
       ProgVar @[0] { };
       ProgVar @[1] { };
       ProgVar @[2] { };
      };
     };
     MethodCall @[1] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[2] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetCounterInit @[3] { };
     MethodCall @[4] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[5] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     AssignExpr @[6] { };
     AssignExpr @[7] { };
     AssignExpr @[8] { };
     AssignExpr @[9] { };
     WhileLoop @[10] { 
      ProgEl_List @.loop_code = [7] {
       If @[0] { 
	ProgEl_List @.true_code = [2] {
	 If @[0] { 
	  ProgEl_List @.true_code = [2] {
	   AssignExpr @[0] { };
	   AssignExpr @[1] { };
	  };
	 };
	 Else @[1] { 
	  ProgEl_List @.true_code = [4] {
	   VarIncr @[0] { };
	   AssignExpr @[1] { };
	   AssignExpr @[2] { };
	   AssignExpr @[3] { };
	  };
	 };
	};
       };
       ProgramCall @[1] { 
	ProgArg_List @.prog_args = [2] {
	 ProgArg @[0] { };
	 ProgArg @[1] { };
	};
       };
       ProgramCall @[2] { 
	ProgArg_List @.prog_args = [1] {
	 ProgArg @[0] { };
	};
       };
       NetUpdateView @[3] { };
       NetCounterIncr @[4] { };
       IfContinue @[5] { };
       IfBreak @[6] { };
      };
     };
     MethodCall @[11] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[12] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     MethodCall @[13] { 
      ProgArg_List @.meth_args = [0] {
      };
     };
     NetUpdateView @[14] { };
    };
   };
  };
 };

 taViewer_List @.viewers = [1] {
  MainWindowViewer @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
   };

   ToolBar_List @.toolbars = [1] {
    ToolBar @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
     };
    };
   };

   FrameViewer_List @.frames = [3] {
    BrowseViewerTaBase @[0] { };
    PanelViewer @[1] { };
    T3PanelViewer @[2] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
     };

     T3Panel_List @.panels = [4] {
      T3Panel @[0] { 
       T3DataView_List @.root_view.children = [1] {
	NetView @[0] { 
	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 ScaleRange_List @.scale_ranges = [16] {
	  ScaleRange @[0] { };
	  ScaleRange @[1] { };
	  ScaleRange @[2] { };
	  ScaleRange @[3] { };
	  ScaleRange @[4] { };
	  ScaleRange @[5] { };
	  ScaleRange @[6] { };
	  ScaleRange @[7] { };
	  ScaleRange @[8] { };
	  ScaleRange @[9] { };
	  ScaleRange @[10] { };
	  ScaleRange @[11] { };
	  ScaleRange @[12] { };
	  ScaleRange @[13] { };
	  ScaleRange @[14] { };
	  ScaleRange @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[1] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [13] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	  GraphColView @[4] { };
	  GraphColView @[5] { };
	  GraphColView @[6] { };
	  GraphColView @[7] { };
	  GraphColView @[8] { };
	  GraphColView @[9] { };
	  GraphColView @[10] { };
	  GraphColView @[11] { };
	  GraphColView @[12] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[2] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [3] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
      T3Panel @[3] { 
       T3DataView_List @.root_view.children = [1] {
	GraphTableView @[0] { 
	 T3DataView_List @.children = [4] {
	  GraphColView @[0] { };
	  GraphColView @[1] { };
	  GraphColView @[2] { };
	  GraphColView @[3] { };
	 };

	 T3Annotation_List @.annotations = [0] {
	 };

	 T3DataView_List @.annote_children = [0] {
	 };

	 GraphPlotView_List @.plots = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };

	 GraphPlotView_List @.errbars = [16] {
	  GraphPlotView @[0] { };
	  GraphPlotView @[1] { };
	  GraphPlotView @[2] { };
	  GraphPlotView @[3] { };
	  GraphPlotView @[4] { };
	  GraphPlotView @[5] { };
	  GraphPlotView @[6] { };
	  GraphPlotView @[7] { };
	  GraphPlotView @[8] { };
	  GraphPlotView @[9] { };
	  GraphPlotView @[10] { };
	  GraphPlotView @[11] { };
	  GraphPlotView @[12] { };
	  GraphPlotView @[13] { };
	  GraphPlotView @[14] { };
	  GraphPlotView @[15] { };
	 };
	};
       };

       T3SavedView_List @.saved_views = [10] {
	T3SavedView @[0] { };
	T3SavedView @[1] { };
	T3SavedView @[2] { };
	T3SavedView @[3] { };
	T3SavedView @[4] { };
	T3SavedView @[5] { };
	T3SavedView @[6] { };
	T3SavedView @[7] { };
	T3SavedView @[8] { };
	T3SavedView @[9] { };
       };
      };
     };
    };
   };

   DockViewer_List @.docks = [1] {
    ToolBoxDockViewer @[0] { 
     UserDataItem_List @*(.user_data_) {
      UserDataItem @[0] { };
      UserDataItem @[1] { };
      UserDataItem @[2] { };
      UserDataItem @[3] { };
      UserDataItem @[4] { };
      UserDataItem @[5] { };
     };
    };
   };
  };
 };

 Network_Group @.networks = [1] {
  LeabraNetwork @[0] { 
   UserDataItem_List @*(.user_data_) {
    UserDataItem @[0] { };
    UserDataItem @[1] { };
    UserDataItem @[2] { };
    UserDataItem @[3] { };
    UserDataItem @[4] { };
    UserDataItem @[5] { };
    UserDataItem @[6] { };
    UserDataItem @[7] { };
    UserDataItem @[8] { };
    UserDataItem @[9] { };
    UserDataItem @[10] { };
    UserDataItem @[11] { };
    UserDataItem @[12] { };
    UserDataItem @[13] { };
    UserDataItem @[14] { };
    UserDataItem @[15] { };
    UserDataItem @[16] { };
    UserDataItem @[17] { };
    UserDataItem @[18] { };
    UserDataItem @[19] { };
    UserDataItem @[20] { };
    UserDataItem @[21] { };
    UserDataItem @[22] { };
    UserDataItem @[23] { };
    UserDataItem @[24] { };
    UserDataItem @[25] { };
    UserDataItem @[26] { };
    UserDataItem @[27] { };
    UserDataItem @[28] { };
    UserDataItem @[29] { };
    UserDataItem @[30] { };
   };

   BaseSpec_Group @.specs = [5] {
    LeabraUnitSpec @[0] { 
     BaseSpec_Group @.children = [0] {
     };

     Schedule @.noise_sched = [0] {
     };
    };
    LeabraConSpec @[1] { 
     BaseSpec_Group @.children = [1] {
      LeabraBiasSpec @[0] { 
       BaseSpec_Group @.children = [0] {
       };

       Schedule @.lrate_sched = [0] {
       };
      };
     };

     Schedule @.lrate_sched = [0] {
     };
    };
    LeabraLayerSpec @[2] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    OneToOnePrjnSpec @[3] { 
     BaseSpec_Group @.children = [0] {
     };
    };
    FullPrjnSpec @[4] { 
     BaseSpec_Group @.children = [0] {
     };
    };
   };

   ParamSeq_Group @.param_seqs = [0] {
   };

   Layer_Group @.layers = [2] {
    LeabraLayer @[0] { 
     Projection_Group @.projections = [0] {
     };

     Unit_Group @.units = [10] {
     };
    };
    LeabraLayer @[1] { 
     Projection_Group @.projections = [1] {
      LeabraPrjn @[0] { };
     };

     Unit_Group @.units = [10] {
     };
    };
   };

   Weights_List @.weights = [0] {
   };
  };
 };
};
LeabraProject .projects[0] {
 name="layer_fffb";
 desc="simple layer activation dynamics with basic feed forward feed back inhibition. No learning";
 tags="Neuron, Spiking, Rate Code, Membrane Potential, Ions";
 version {
  major=8;
  minor=0;
  step=6;
 };
 author="Kai Krueger";
 email="kai.krueger@colorado.edu";
 license {
  license=GPLv2;
  owner_name=;
  org=;
  year="2016";
  custom=;
 };
 pub_cite=;
 wiki {wiki="CCN": page_name="": };
 docs {
  name="docs";
  el_typ=taDoc;
  el_def=0;
 };
 wizards {
  name="wizards";
  el_typ=LeabraWizard;
  el_def=0;
  LeabraWizard @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItemBase;
    el_def=0;
    UserDataItem @[0] {name="NO_CLIP": value=1: val_type_fixed=0: };
   };
   name="LeabraWizard_1";
  };
 };
 ctrl_panels {
  name="ctrl_panels";
  el_typ=ControlPanel;
  el_def=0;
  master_and_clones=0;
  ControlPanel @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserDataItem @[0] {name="user_pinned": value=1: val_type_fixed=0: };
   };
   name="ControlPanel";
   cp_state=REGULAR;
   updt_while_running=0;
   desc="The master control panel for the simulation -- see the Doc panel for more info";
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
    ControlPanelMember @[0] {
     label="act_fun";
     short_label=1;
     cust_label=0;
     desc=" activation function to use -- typically NOISY_XX1 or SPIKE -- others are for special purposes or testing<br> * NOISY XX1:  x over x plus 1 convolved with Gaussian noise (noise is nvar)<br> * SPIKE:  discrete spiking activations (spike when > thr) -- default params produce adaptive exponential (AdEx) model";
     cust_desc=0;
     base=.networks[0].specs[0]$$;
     mbr=LeabraUnitSpec::act_fun;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="spike vs. rate code (NOISY XX1)": };
    };
    ControlPanelMember @[1] {
     label="g_bar";
     short_label=1;
     cust_label=0;
     desc=" [Defaults: 1, .1, 1] maximal conductances for channels";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::g_bar;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="0.3, 0.3, 1 defaults": };
    };
    ControlPanelMember @[2] {
     label="e_rev";
     short_label=1;
     cust_label=0;
     desc=" [Defaults: 1, .3, .25] reversal potentials for each channel";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::e_rev;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="1, 0.3, 0.25 defaults": };
    };
    ControlPanelMember @[3] {
     label="noise_var";
     short_label=0;
     cust_label=1;
     desc=" 'varibility' parameter for the random numbers (gauss = standard deviation, not variance; uniform = half-range)";
     cust_desc=0;
     base=.networks[0].specs[0].noise$$;
     mbr=Random::var;
     data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="0 default": };
    };
    ControlPanelMember @[4] {
     label="adapt";
     short_label=1;
     cust_label=0;
     desc=" activation-driven adaptation factor that drives spike rate adaptation dynamics based on both sub- and supra-threshold membrane potentials";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::adapt;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="144, 0.04, 0.00805 defaults": };
    };
    ControlPanelMember @[5] {
     label="stp";
     short_label=1;
     cust_label=0;
     desc=" short term presynaptic plasticity specs -- can implement full range between facilitating vs. depresssion";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::stp;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="off by default": };
    };
    ControlPanelMember @[6] {
     label="act";
     short_label=1;
     cust_label=0;
     desc=" activation function parameters -- very important for determining the shape of the selected act_fun";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::act;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="0.5, 40, 0.01 defaults": };
    };
    ControlPanelMember @[7] {
     label="spike_misc";
     short_label=1;
     cust_label=0;
     desc=" misc extra spiking function specs (only for act_fun = SPIKE)";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::spike_misc;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="ex, .02, 1.2, 0.3, 0, 0.12, regular defaults": };
    };
    ControlPanelMember @[8] {
     label="dt";
     short_label=1;
     cust_label=0;
     desc=" time constants (rate of updating): membrane potential (vm) and net input (net)";
     cust_desc=0;
     base=$.networks[0].specs[0]$;
     mbr=LeabraUnitSpec::dt;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=0: state=EXPLORE: saved_value="": range="0:1:0.1": notes="1, 3.3, 1.4, 0 defaults": };
    };
    ControlPanelMember @[9] {
     label="cycle_update_net_view";
     short_label=0;
     cust_label=1;
     desc=" boolean value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
     cust_desc=0;
     base=.programs.gp[0][1].vars[0]$$;
     mbr=ProgVar::bool_val;
     data {ctrl_type=CONTROL: is_numeric=0: is_single=1: state=EXPLORE: saved_value="": range="": notes="": };
    };
    ControlPanelMember_Group @.gp[0] {
     name="Sending_Unit_Activation_Timing";
     el_typ=ControlPanelMember;
     el_def=0;
     ControlPanelMember @[0] {
      label="n_cycles";
      short_label=1;
      cust_label=0;
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.programs.gp[0][0].vars[0]$$;
      mbr=ProgVar::int_val;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="200 default": };
     };
     ControlPanelMember @[1] {
      label="on_cycle";
      short_label=1;
      cust_label=0;
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.programs.gp[0][0].vars[1]$$;
      mbr=ProgVar::int_val;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="10 default": };
     };
     ControlPanelMember @[2] {
      label="off_cycle";
      short_label=1;
      cust_label=0;
      desc=" integer value -- this is the current actual value of the variable at all times for global variables, and is used as an initialization value for local variables (they start with this value, but what you see here is NOT their current value as the program runs)";
      cust_desc=0;
      base=.programs.gp[0][0].vars[2]$$;
      mbr=ProgVar::int_val;
      data {ctrl_type=CONTROL: is_numeric=1: is_single=1: state=EXPLORE: saved_value="": range="0:1:0.1": notes="160 default": };
     };
    };
    ControlPanelMember_Group @.gp[1] {
     name="Net_Data";
     el_typ=ControlPanelMember;
     el_def=0;
    };
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
    ControlPanelMethod @[0] {
     label="Init";
     short_label=0;
     cust_label=0;
     desc=" run init_code, global variables retain current values unless reset in the init_code";
     cust_desc=0;
     base=.programs.gp[0][0]$$;
     mth=Program::Init;
    };
    ControlPanelMethod @[1] {
     label="Run";
     short_label=0;
     cust_label=0;
     desc=" run the program -- if not yet Init, will run Init first";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[2] {
     label="Step";
     short_label=0;
     cust_label=0;
     desc=" step the program at the level of the given program -- if NULL then step_prog default value will be used";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Step_Gui;
    };
    ControlPanelMethod @[3] {
     label="Stop";
     short_label=0;
     cust_label=0;
     desc=" stop the current program at its next natural stopping point (i.e., cleanly stopping when appropriate chunks of computation have completed)";
     cust_desc=0;
     base=$.programs.gp[0][0]$;
     mth=Program::Stop;
    };
    ControlPanelMethod @[4] {
     label="Defaults";
     short_label=0;
     cust_label=1;
     desc="set all the parameters back to initial defaults (for AdEx spiking)";
     cust_desc=1;
     base=.programs[0]$$;
     mth=Program::Run_Gui;
    };
    ControlPanelMethod @[5] {
     label="SpikeVsRate_Run";
     short_label=0;
     cust_label=1;
     desc="run the Spiking vs. Rate code program which produces a graph comparing spiking vs rate code rates";
     cust_desc=1;
     base=.programs[1]$$;
     mth=Program::Run_Gui;
    };
   };
  };
  ClusterRun @[1] {
   name="ClusterRun";
   cp_state=REGULAR;
   updt_while_running=0;
   desc=;
   mbrs {
    name="mbrs";
    el_typ=ControlPanelMember;
    el_def=0;
   };
   mths {
    name="mths";
    el_typ=ControlPanelMethod;
    el_def=0;
    group_type=GT_BUTTONS;
   };
   search_algos {
    name="search_algos";
    el_typ=ParamSearchAlgo;
    el_def=0;
   };
   use_search_algo=0;
   cur_search_algo=NULL;
   set_proj_name=0;
   proj_name=;
   auto_updt_interval=10;
   auto_updt_timeout=30;
   cluster=;
   clusters=;
   users=;
   last_submit_time=;
   notes=;
   label=;
   extra_files=;
   svn_repo=;
   repo_url=;
   queue=;
   run_time=;
   exe_cmd="emergent";
   ram_gb=0;
   n_threads=1;
   use_cuda=0;
   use_mpi=0;
   mpi_nodes=10;
   mpi_per_node=1;
   parallel_batch=0;
   pb_batches=10;
   pb_n_batches_per=1;
   nowin_x=0;
   enable_kill=0;
   enable_load=0;
   enable_notes=0;
  };
 };
 active_params {
  name="active_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 archived_params {
  name="archived_params";
  el_typ=ParamSet;
  el_def=0;
  master_and_clones=0;
 };
 data {
  name="data";
  el_typ=DataTable;
  el_def=0;
  save_tables=1;
  DataTable_Group @.gp[0] {
   name="InputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="Environment_0";
    desc=;
    data {
     name="data";
     el_typ=String_Data;
     el_def=0;
     String_Data @[0] {
      name="Name";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=16;
      matrix_col_width=10;
      ar {
       name="ar";
      [1] "Event_0";      };
     };
     float_Data @[1] {
      name="Input";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=1;
      cell_geom{ 1;1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [2] ;;      };
      width=5;
      matrix_col_width=10;
      ar {
       name="ar";
      [1 1 1] 0;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [1] 0;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[1] {
   name="OutputData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="CycleOutputData";
    desc=;
    data {
     name="data";
     el_typ=int_Data;
     el_def=0;
     int_Data @[0] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_19";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="NARROW": value=1: val_type_fixed=0: };
      };
      name="cycle";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 1;2;3;4;5;6;7;8;9;10;
11;12;13;14;15;16;17;18;19;20;
21;22;23;24;25;26;27;28;29;30;
31;32;33;34;35;36;37;38;39;40;
41;42;43;44;45;46;47;48;49;50;
51;52;53;54;55;56;57;58;59;60;
61;62;63;64;65;66;67;68;69;70;
71;72;73;74;75;76;77;78;79;80;
81;82;83;84;85;86;87;88;89;90;
91;92;93;94;95;96;97;98;99;100;
101;102;103;104;105;106;107;108;109;110;
111;112;113;114;115;116;117;118;119;120;
121;122;123;124;125;126;127;128;129;130;
131;132;133;134;135;136;137;138;139;140;
141;142;143;144;145;146;147;148;149;150;
151;152;153;154;155;156;157;158;159;160;
161;162;163;164;165;166;167;168;169;170;
171;172;173;174;175;176;177;178;179;180;
181;182;183;184;185;186;187;188;189;190;
191;192;193;194;195;196;197;198;199;200;
      };
     };
     float_Data @[1] {
      name="net";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0;0;0;0;0;0;0;0;0;0;
0.21428573;0.27551022;0.29300293;0.29800084;0.29942882;0.29983681;0.29995337;0.29998669;0.2999962;0.29999891;
0.29999971;0.29999992;0.29999998;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;0.30000001;
0.085714281;0.024489794;0.0069970833;0.0019991668;0.00057119038;0.00016319723;4.6627778e-05;1.3322221e-05;3.806349e-06;1.0875283e-06;
3.107223e-07;8.8777796e-08;2.5365084e-08;7.2471673e-09;2.070619e-09;5.9160532e-10;1.690301e-10;4.8294313e-11;1.3798373e-11;3.9423924e-12;
1.1263977e-12;3.2182793e-13;9.1950834e-14;2.6271665e-14;7.5061891e-15;2.144625e-15;6.1274993e-16;1.750714e-16;5.0020396e-17;1.4291542e-17;
4.0832969e-18;1.1666563e-18;3.3333034e-19;9.5237239e-20;2.7210636e-20;7.774467e-21;2.2212762e-21;6.3465034e-22;1.8132865e-22;5.1808184e-23;
      };
     };
     float_Data @[2] {
      name="I_net";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] -0.028636364;-0.026175601;-0.023926103;-0.021869745;-0.019989928;-0.0182715;-0.01670062;-0.015264606;-0.01395189;-0.012751881;
0.10870413;0.11844326;0.10246702;0.083632968;0.067082882;0;0.169958;0.13290405;0.10317456;0.079802044;
0.061649796;0.047638327;0.036847722;0;0.15966803;0.12497949;0.097954437;0.076818645;0.060250476;0.047251482;
0.037052378;0.029052718;0.022780897;0;0.15363835;0.12064228;0.094917044;0.074722134;0.058815893;0.046280012;
0.03640651;0.028637787;0.022530647;0.01773303;0;0.14829546;0.11689651;0.092371449;0.073009253;0.057664603;
0.045511223;0.035904415;0.02832552;0.022354517;0.017654018;0.013955137;0;0.14357862;0.11364642;0.090219796;
0.071605369;0.056751911;0.044926301;0.035546467;0.028128054;0.022270728;0.017649159;0.014003109;0.011126384;0.008856304;
0;0.13961689;0.11086112;0.088338785;0.070391819;0.056001492;0.044487089;0.035315633;0.028037507;0.022273742;
0.017712899;0.01410418;0.01124835;0.0089879408;0.007198792;0;0.13624384;0.10840932;0.086583555;0.069214299;
0.055278949;0.044091176;0.035137694;0.02799825;0.022320673;0.017812382;0.014234129;0.011394318;0.0091405213;0.0073517933;
0.0059317388;0.0048042834;0.0039092191;0;0.13375396;0.10655864;0.085184589;0.068083718;0.054451883;0.043594833;
0.0349424;0.02803953;0.022446234;0.017963927;0.014393173;0.011554457;0.0092990361;0.0075069219;0.0060821623;0.0049483366;
0.0040459558;0.003327813;0.0027557313;0;0.13193351;0.10518941;0.08396484;0.067123972;0.053747777;0.043105353;
0.034622103;0.027848393;0.022432555;0.018097959;0.014625613;0.011843406;0.0096144117;0.0078278817;0.0063968264;0.0052517094;
0.0042219423;0.003410656;0.0027951114;0.0023271963;0.00196613;0;0.13074057;0.10413924;0.083124526;0.066492751;
0.053293988;0.042790994;0.03441393;0.027720544;0.022364352;0.018074039;0.01463579;0.011878673;0.0096671768;0.0078939237;
-0.063469343;-0.083497152;-0.084561959;-0.079389617;-0.072869487;-0.066403568;-0.06036149;-0.054811683;-0.049738795;-0.045107294;
-0.040879313;-0.037019283;-0.033494756;-0.030276347;-0.027337402;-0.024653699;-0.022203177;-0.019965742;-0.017923031;-0.0160583;
-0.014356229;-0.012802841;-0.011385353;-0.010092068;-0.0089123212;-0.0078363381;-0.0068551935;-0.0059607215;-0.0051454678;-0.0044026189;
-0.0037259348;-0.0031097047;-0.0025487393;-0.002038274;-0.0015739463;-0.0011517853;-0.00076814368;-0.00041969866;-0.00010341406;0.00018348172;
      };
     };
     float_Data @[3] {
      name="v_m";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0.39132231;0.38339031;0.37613997;0.36951277;0.36345521;0.35791838;0.35285759;0.34823194;0.34400409;0.3401399;
0.37308055;0.40897244;0.44002306;0.46536639;0.48569453;0.30000001;0.35150245;0.39177641;0.42304143;0.44722387;
0.46590564;0.48034149;0.49150747;0.30000001;0.34838426;0.38625684;0.41594002;0.4392184;0.45747611;0.47179475;
0.48302275;0.49182659;0.49872988;0.30000001;0.34655708;0.38311535;0.41187808;0.43452114;0.45234415;0.46636841;
0.47740069;0.4860788;0.49290627;0.49827993;0.30000001;0.34493804;0.38036123;0.40835258;0.43047661;0.44795072;
0.46174201;0.47262213;0.48120561;0.48797971;0.49332941;0.49755824;0.30000001;0.34350869;0.377947;0.40528634;
0.42698494;0.44418249;0.45779651;0.46856818;0.47709182;0.48384053;0.48918876;0.49343213;0.49680376;0.49948749;
0.30000001;0.34230816;0.37590244;0.40267178;0.42400265;0.44097281;0.45445374;0.46515545;0.47365168;0.48040131;
0.48576885;0.49004284;0.49345142;0.49617502;0.49835646;0.30000001;0.34128603;0.37413734;0.40037477;0.42134881;
0.43810001;0.45146099;0.46210876;0.47059309;0.47735694;0.48275462;0.487068;0.49052083;0.49329069;0.49551851;
0.497316;0.49877185;0.49995646;0.30000001;0.34053153;0.37282202;0.39863554;0.41926697;0.43576753;0.4489781;
0.45956671;0.46806353;0.47486544;0.48030904;0.48467061;0.48817196;0.49098986;0.49326468;0.49510774;0.49660724;
0.49783328;0.4988417;0.49967676;0.30000001;0.33997986;0.37185544;0.39729932;0.41763991;0.43392712;0.44698936;
0.45748091;0.46591982;0.47271755;0.47820178;0.48263377;0.48622268;0.48913613;0.49150822;0.49344665;0.49503806;
0.49631745;0.49735099;0.498198;0.49890321;0.49949902;0.30000001;0.33961836;0.37117571;0.39636496;0.41651428;
0.43266398;0.44563094;0.4560594;0.46445957;0.47123665;0.47671363;0.48114872;0.4847483;0.48767775;0.49006984;
0.4708367;0.44553453;0.41990969;0.39585224;0.37377056;0.35364828;0.33535692;0.31874731;0.30367494;0.29000607;
0.27761841;0.26640046;0.25625053;0.24707589;0.23879182;0.23132101;0.22459278;0.21854255;0.21311133;0.20824517;
0.20389479;0.20001514;0.19656503;0.19350684;0.19080614;0.18843149;0.18635416;0.18454789;0.18298866;0.18165453;
0.18052545;0.17958312;0.17881078;0.17819312;0.17771617;0.17736714;0.17713436;0.17700718;0.17697585;0.17703144;
      };
     };
     float_Data @[4] {
      name="act";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0;0;0;0;0;0;0;0;0;0;
0;0;0;3.8459398e-06;0.011777385;0.24983115;0.40034211;0.49867076;0.56160283;0.60122758;
0.6258679;0.64105731;0.65036237;0.65603721;0.63184816;0.61706269;0.60869354;0.60423225;0.60203165;0.60109252;
0.6008395;0.60095543;0.60126448;0.6016705;0.56023014;0.5374105;0.5263412;0.52167547;0.52025056;0.52039093;
0.52123362;0.52237892;0.52363986;0.52493298;0.52621698;0.46514285;0.43563566;0.42457312;0.42218092;0.42329219;
0.42563033;0.42824569;0.43084389;0.43335459;0.43577954;0.4381263;0.44039682;0.36033696;0.32401097;0.31357983;
0.31416368;0.31823641;0.32287472;0.32724658;0.33124244;0.33495909;0.33850929;0.34196249;0.34535399;0.34868881;
0.35195291;0.26873004;0.22695425;0.21377721;0.21428925;0.21940546;0.22527176;0.23075882;0.23576397;0.24043483;
0.24491815;0.24929892;0.25361589;0.25787261;0.26207131;0.26622286;0.19462109;0.15322515;0.13539495;0.13183622;
0.13487454;0.14013577;0.1458016;0.15127708;0.15649194;0.16155252;0.16650797;0.17138948;0.17621323;0.18101127;
0.18577605;0.19050221;0.19518811;0.19984286;0.14311747;0.10736965;0.099930786;0.093610629;0.088982962;0.086129971;
0.084896944;0.090782449;0.096708164;0.10223439;0.1074914;0.1125687;0.11753465;0.12245551;0.1273867;0.13230319;
0.13718933;0.14207926;0.14696755;0.15183307;0.10762955;0.09599442;0.084860913;0.075677834;0.068743736;0.063996069;
0.0611878;0.059996683;0.060130984;0.061361913;0.06339214;0.06600029;0.069095381;0.072489947;0.076047778;0.087053843;
0.095228389;0.10154202;0.10693475;0.11193998;0.11680407;0.12162845;0.10696279;0.091239519;0.077304646;0.066080898;
0.057682887;0.051820781;0.048086233;0.046157453;0.045649376;0.046219982;0.04767365;0.049801413;0.052383758;0.055357113;
0.03859156;0.026897147;0.018746495;0.013065739;0.0091064237;0.0063469009;0.0044235978;0.0030831136;0.0021488369;0.0014976742;
0.0010438334;0.00072752027;0.00050705957;0.00035340514;0.00024631267;0.00017167247;0.0001196505;8.3392777e-05;5.8122238e-05;4.050944e-05;
2.8233851e-05;1.9678138e-05;1.3715066e-05;9.5589849e-06;6.6623224e-06;4.643437e-06;3.2363348e-06;2.2556274e-06;1.5721039e-06;1.0957087e-06;
7.6367576e-07;5.3225887e-07;3.7096828e-07;2.5855365e-07;1.8020407e-07;1.2559677e-07;8.7537146e-08;6.1010738e-08;4.2522636e-08;2.9636988e-08;
      };
     };
     float_Data @[5] {
      name="act_eq";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0;0;0;0;0;0;0;0;0;0;
0;0;0;3.8459398e-06;0.011777385;0.24983115;0.40034211;0.49867076;0.56160283;0.60122758;
0.6258679;0.64105731;0.65036237;0.65603721;0.63184816;0.61706269;0.60869354;0.60423225;0.60203165;0.60109252;
0.6008395;0.60095543;0.60126448;0.6016705;0.56023014;0.5374105;0.5263412;0.52167547;0.52025056;0.52039093;
0.52123362;0.52237892;0.52363986;0.52493298;0.52621698;0.46514285;0.43563566;0.42457312;0.42218092;0.42329219;
0.42563033;0.42824569;0.43084389;0.43335459;0.43577954;0.4381263;0.44039682;0.36033696;0.32401097;0.31357983;
0.31416368;0.31823641;0.32287472;0.32724658;0.33124244;0.33495909;0.33850929;0.34196249;0.34535399;0.34868881;
0.35195291;0.26873004;0.22695425;0.21377721;0.21428925;0.21940546;0.22527176;0.23075882;0.23576397;0.24043483;
0.24491815;0.24929892;0.25361589;0.25787261;0.26207131;0.26622286;0.19462109;0.15322515;0.13539495;0.13183622;
0.13487454;0.14013577;0.1458016;0.15127708;0.15649194;0.16155252;0.16650797;0.17138948;0.17621323;0.18101127;
0.18577605;0.19050221;0.19518811;0.19984286;0.14311747;0.10736965;0.099930786;0.093610629;0.088982962;0.086129971;
0.084896944;0.090782449;0.096708164;0.10223439;0.1074914;0.1125687;0.11753465;0.12245551;0.1273867;0.13230319;
0.13718933;0.14207926;0.14696755;0.15183307;0.10762955;0.09599442;0.084860913;0.075677834;0.068743736;0.063996069;
0.0611878;0.059996683;0.060130984;0.061361913;0.06339214;0.06600029;0.069095381;0.072489947;0.076047778;0.087053843;
0.095228389;0.10154202;0.10693475;0.11193998;0.11680407;0.12162845;0.10696279;0.091239519;0.077304646;0.066080898;
0.057682887;0.051820781;0.048086233;0.046157453;0.045649376;0.046219982;0.04767365;0.049801413;0.052383758;0.055357113;
0.03859156;0.026897147;0.018746495;0.013065739;0.0091064237;0.0063469009;0.0044235978;0.0030831136;0.0021488369;0.0014976742;
0.0010438334;0.00072752027;0.00050705957;0.00035340514;0.00024631267;0.00017167247;0.0001196505;8.3392777e-05;5.8122238e-05;4.050944e-05;
2.8233851e-05;1.9678138e-05;1.3715066e-05;9.5589849e-06;6.6623224e-06;4.643437e-06;3.2363348e-06;2.2556274e-06;1.5721039e-06;1.0957087e-06;
7.6367576e-07;5.3225887e-07;3.7096828e-07;2.5855365e-07;1.8020407e-07;1.2559677e-07;8.7537146e-08;6.1010738e-08;4.2522636e-08;2.9636988e-08;
      };
     };
     float_Data @[6] {
      name="spike";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;1;0;0;0;0;0;
0;0;0;0;0;0;1;0;0;0;
0;0;0;0;0;0;0;0;0;0;
1;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;1;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;1;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[7] {
      name="adapt";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 2.5367306e-05;4.8355112e-05;6.9169299e-05;8.7998051e-05;0.00010501339;0.00012037257;0.00013421931;0.00014668499;0.00015788971;0.00016794322;
0.00018707709;0.00021604807;0.00025344302;0.0002976181;0.00034713311;0.0083947228;0.0083507327;0.0083182352;0.0082946476;0.0082779415;
0.0082665402;0.0082592284;0.0082550691;0.016247742;0.016148351;0.01606017;0.015980847;0.015908541;0.015841808;0.015779516;
0.015720775;0.015664889;0.015611308;0.023552896;0.023402268;0.02326284;0.023132369;0.023009095;0.022891628;0.022778871;
0.022669962;0.022564219;0.022461109;0.022360208;0.030254928;0.030057307;0.029870899;0.029693561;0.029523598;0.02935967;
0.029200712;0.02904588;0.028894506;0.028746067;0.028600143;0.028456409;0.036308795;0.036068738;0.035839912;0.035620268;
0.03540818;0.035202339;0.03500171;0.034805465;0.034612954;0.034423653;0.034237154;0.034053128;0.033871315;0.033691511;
0.041507542;0.041231047;0.040965803;0.040709838;0.040461577;0.040219754;0.039983355;0.039751571;0.039523754;0.039299395;
0.039078087;0.038859501;0.038643379;0.038429514;0.038217742;0.046002343;0.045694351;0.045397624;0.045110244;0.044830687;
0.044557724;0.044290368;0.044027824;0.043769464;0.043514773;0.043263353;0.043014877;0.042769086;0.042525768;0.042284761;
0.042045925;0.041809153;0.041574355;0.049335644;0.049004294;0.048684213;0.048373528;0.048070729;0.047774617;0.04748423;
0.047198802;0.046917718;0.046640474;0.046366669;0.046095975;0.045828134;0.045562934;0.045300208;0.045039821;0.044781659;
0.044525627;0.044271655;0.04401968;0.051763989;0.051415622;0.051078528;0.050750844;0.050431084;0.05011807;0.049810857;
0.049508691;0.049210969;0.048917204;0.048627;0.048340045;0.048056077;0.047774892;0.047496319;0.047220219;0.046946477;
0.046674993;0.04640568;0.046138473;0.045873318;0.045610171;0.053343434;0.052983999;0.052635826;0.052297067;0.051966257;
0.051642232;0.051324058;0.051010992;0.050702434;0.050397899;0.050097;0.049799424;0.049504913;0.04921326;0.048924297;
0.048632;0.048334703;0.048032355;0.04772542;0.047414485;0.047100119;0.046782855;0.04646318;0.046141539;0.045818336;
0.045493938;0.045168675;0.04484285;0.044516742;0.044190597;0.043864641;0.043539081;0.043214098;0.042889863;0.04256653;
0.042244233;0.041923098;0.041603234;0.04128474;0.04096771;0.040652223;0.040338349;0.040026151;0.039715689;0.039407011;
0.039100163;0.038795184;0.03849211;0.038190968;0.037891787;0.037594583;0.03729938;0.037006192;0.036715031;0.036425907;
      };
     };
     float_Data @[8] {
      name="syn_tr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
      };
     };
     float_Data @[9] {
      name="syn_nr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
      };
     };
     float_Data @[10] {
      name="syn_pr";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;0.2;
      };
     };
     float_Data @[11] {
      name="syn_kre";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
      };
     };
     float_Data @[12] {
      name="vm_eq";
      col_flags=MARK|PIN|SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{ 1;      };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [200] 0.39090911;0.38263696;0.37510985;0.36826071;0.36202854;0.35635775;0.35119784;0.34650281;0.34223083;0.33834383;
0.37501824;0.41487718;0.44855967;0.47522739;0.49592906;0.51183343;0.52027643;0.5254612;0.52844942;0.53005922;
0.53084868;0.53117323;0.53124875;0.53120136;0.52867913;0.52694541;0.52579612;0.52504271;0.5245496;0.52422696;
0.52401686;0.52388209;0.52379858;0.52375048;0.52130497;0.51975542;0.51883399;0.51830155;0.51799953;0.51783341;
0.51774895;0.51771528;0.51771444;0.5177356;0.5177719;0.5153966;0.51401395;0.51329392;0.51294255;0.51278156;
0.51271832;0.51270783;0.51272887;0.51277077;0.51282752;0.51289517;0.51297098;0.51063049;0.50937939;0.50883114;
0.50863415;0.50858909;0.50860596;0.50865036;0.50871074;0.50878322;0.50886577;0.50895655;0.50905377;0.50915581;
0.50926137;0.50694716;0.50572985;0.50524485;0.50512838;0.50516206;0.50524634;0.50534564;0.50545084;0.50556082;
0.50567561;0.50579476;0.50591749;0.50604278;0.5061698;0.50629801;0.5040043;0.50273502;0.50219202;0.50205702;
0.50211293;0.50224316;0.50239652;0.50255471;0.50271308;0.50287116;0.50302905;0.50318676;0.50334418;0.503501;
0.50365692;0.50381178;0.50396538;0.50411767;0.50184613;0.50051087;0.49986535;0.4995847;0.49952966;0.49962169;
0.4998084;0.50005281;0.50029784;0.50052977;0.50074917;0.50095904;0.50116193;0.50135964;0.50155306;0.50174248;
0.50192821;0.50211066;0.50228995;0.50246614;0.50021696;0.49883041;0.49799803;0.49755538;0.49738938;0.49741587;
0.49757159;0.49780986;0.49809715;0.49841011;0.49873269;0.49905479;0.49937049;0.49967632;0.49997091;0.50025445;
0.50048786;0.50068563;0.50086653;0.50104189;0.50121683;0.50139278;0.49914712;0.49760431;0.49663123;0.49609166;
0.49586737;0.49586365;0.49600843;0.49624905;0.49654755;0.49687764;0.4972218;0.49756843;0.49791032;0.49824357;
0.47673094;0.44951493;0.42225245;0.39681643;0.3735871;0.35251912;0.3334572;0.31622818;0.30066645;0.28661981;
0.27394989;0.26253113;0.2522496;0.24300176;0.23469359;0.22723958;0.220562;0.2145901;0.20925957;0.20451187;
0.20029372;0.1965567;0.19325671;0.19035363;0.18781097;0.18559553;0.18367709;0.18202817;0.18062375;0.17944109;
0.17845948;0.17766009;0.17702579;0.176541;0.17619152;0.17596447;0.17584814;0.17583184;0.17590585;0.17606138;
      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [200] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
  DataTable_Group @.gp[2] {
   name="AnalysisData";
   el_typ=DataTable;
   el_def=0;
   save_tables=1;
   DataTable @[0] {
    name="UnitSpec_0_ActFmNetFun";
    desc=;
    data {
     name="data";
     el_typ=float_Data;
     el_def=0;
     float_Data @[0] {
      name="Net";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [701] 0.30000001;0.301;0.30199999;0.30299997;0.30399996;0.30499995;0.30599993;0.30699992;0.30799991;0.3089999;
0.30999988;0.31099987;0.31199986;0.31299984;0.31399983;0.31499982;0.31599981;0.31699979;0.31799978;0.31899977;
0.31999975;0.32099974;0.32199973;0.32299972;0.3239997;0.32499969;0.32599968;0.32699966;0.32799965;0.32899964;
0.32999963;0.33099961;0.3319996;0.33299959;0.33399957;0.33499956;0.33599955;0.33699954;0.33799952;0.33899951;
0.3399995;0.34099948;0.34199947;0.34299946;0.34399945;0.34499943;0.34599942;0.34699941;0.34799939;0.34899938;
0.34999937;0.35099936;0.35199934;0.35299933;0.35399932;0.3549993;0.35599929;0.35699928;0.35799927;0.35899925;
0.35999924;0.36099923;0.36199921;0.3629992;0.36399919;0.36499918;0.36599916;0.36699915;0.36799914;0.36899912;
0.36999911;0.3709991;0.37199908;0.37299907;0.37399906;0.37499905;0.37599903;0.37699902;0.37799901;0.37899899;
0.37999898;0.38099897;0.38199896;0.38299894;0.38399893;0.38499892;0.3859989;0.38699889;0.38799888;0.38899887;
0.38999885;0.39099884;0.39199883;0.39299881;0.3939988;0.39499879;0.39599878;0.39699876;0.39799875;0.39899874;
0.39999872;0.40099871;0.4019987;0.40299869;0.40399867;0.40499866;0.40599865;0.40699863;0.40799862;0.40899861;
0.4099986;0.41099858;0.41199857;0.41299856;0.41399854;0.41499853;0.41599852;0.41699851;0.41799849;0.41899848;
0.41999847;0.42099845;0.42199844;0.42299843;0.42399842;0.4249984;0.42599839;0.42699838;0.42799836;0.42899835;
0.42999834;0.43099833;0.43199831;0.4329983;0.43399829;0.43499827;0.43599826;0.43699825;0.43799824;0.43899822;
0.43999821;0.4409982;0.44199818;0.44299817;0.44399816;0.44499815;0.44599813;0.44699812;0.44799811;0.44899809;
0.44999808;0.45099807;0.45199805;0.45299804;0.45399803;0.45499802;0.455998;0.45699799;0.45799798;0.45899796;
0.45999795;0.46099794;0.46199793;0.46299791;0.4639979;0.46499789;0.46599787;0.46699786;0.46799785;0.46899784;
0.46999782;0.47099781;0.4719978;0.47299778;0.47399777;0.47499776;0.47599775;0.47699773;0.47799772;0.47899771;
0.47999769;0.48099768;0.48199767;0.48299766;0.48399764;0.48499763;0.48599762;0.4869976;0.48799759;0.48899758;
0.48999757;0.49099755;0.49199754;0.49299753;0.49399751;0.4949975;0.49599749;0.49699748;0.49799746;0.49899745;
0.49999744;0.50099742;0.50199741;0.5029974;0.50399739;0.50499737;0.50599736;0.50699735;0.50799733;0.50899732;
0.50999731;0.5109973;0.51199728;0.51299727;0.51399726;0.51499724;0.51599723;0.51699722;0.51799721;0.51899719;
0.51999718;0.52099717;0.52199715;0.52299714;0.52399713;0.52499712;0.5259971;0.52699709;0.52799708;0.52899706;
0.52999705;0.53099704;0.53199703;0.53299701;0.533997;0.53499699;0.53599697;0.53699696;0.53799695;0.53899693;
0.53999692;0.54099691;0.5419969;0.54299688;0.54399687;0.54499686;0.54599684;0.54699683;0.54799682;0.54899681;
0.54999679;0.55099678;0.55199677;0.55299675;0.55399674;0.55499673;0.55599672;0.5569967;0.55799669;0.55899668;
0.55999666;0.56099665;0.56199664;0.56299663;0.56399661;0.5649966;0.56599659;0.56699657;0.56799656;0.56899655;
0.56999654;0.57099652;0.57199651;0.5729965;0.57399648;0.57499647;0.57599646;0.57699645;0.57799643;0.57899642;
0.57999641;0.58099639;0.58199638;0.58299637;0.58399636;0.58499634;0.58599633;0.58699632;0.5879963;0.58899629;
0.58999628;0.59099627;0.59199625;0.59299624;0.59399623;0.59499621;0.5959962;0.59699619;0.59799618;0.59899616;
0.59999615;0.60099614;0.60199612;0.60299611;0.6039961;0.60499609;0.60599607;0.60699606;0.60799605;0.60899603;
0.60999602;0.61099601;0.611996;0.61299598;0.61399597;0.61499596;0.61599594;0.61699593;0.61799592;0.6189959;
0.61999589;0.62099588;0.62199587;0.62299585;0.62399584;0.62499583;0.62599581;0.6269958;0.62799579;0.62899578;
0.62999576;0.63099575;0.63199574;0.63299572;0.63399571;0.6349957;0.63599569;0.63699567;0.63799566;0.63899565;
0.63999563;0.64099562;0.64199561;0.6429956;0.64399558;0.64499557;0.64599556;0.64699554;0.64799553;0.64899552;
0.64999551;0.65099549;0.65199548;0.65299547;0.65399545;0.65499544;0.65599543;0.65699542;0.6579954;0.65899539;
0.65999538;0.66099536;0.66199535;0.66299534;0.66399533;0.66499531;0.6659953;0.66699529;0.66799527;0.66899526;
0.66999525;0.67099524;0.67199522;0.67299521;0.6739952;0.67499518;0.67599517;0.67699516;0.67799515;0.67899513;
0.67999512;0.68099511;0.68199509;0.68299508;0.68399507;0.68499506;0.68599504;0.68699503;0.68799502;0.688995;
0.68999499;0.69099498;0.69199497;0.69299495;0.69399494;0.69499493;0.69599491;0.6969949;0.69799489;0.69899487;
0.69999486;0.70099485;0.70199484;0.70299482;0.70399481;0.7049948;0.70599478;0.70699477;0.70799476;0.70899475;
0.70999473;0.71099472;0.71199471;0.71299469;0.71399468;0.71499467;0.71599466;0.71699464;0.71799463;0.71899462;
0.7199946;0.72099459;0.72199458;0.72299457;0.72399455;0.72499454;0.72599453;0.72699451;0.7279945;0.72899449;
0.72999448;0.73099446;0.73199445;0.73299444;0.73399442;0.73499441;0.7359944;0.73699439;0.73799437;0.73899436;
0.73999435;0.74099433;0.74199432;0.74299431;0.7439943;0.74499428;0.74599427;0.74699426;0.74799424;0.74899423;
0.74999422;0.75099421;0.75199419;0.75299418;0.75399417;0.75499415;0.75599414;0.75699413;0.75799412;0.7589941;
0.75999409;0.76099408;0.76199406;0.76299405;0.76399404;0.76499403;0.76599401;0.766994;0.76799399;0.76899397;
0.76999396;0.77099395;0.77199394;0.77299392;0.77399391;0.7749939;0.77599388;0.77699387;0.77799386;0.77899384;
0.77999383;0.78099382;0.78199381;0.78299379;0.78399378;0.78499377;0.78599375;0.78699374;0.78799373;0.78899372;
0.7899937;0.79099369;0.79199368;0.79299366;0.79399365;0.79499364;0.79599363;0.79699361;0.7979936;0.79899359;
0.79999357;0.80099356;0.80199355;0.80299354;0.80399352;0.80499351;0.8059935;0.80699348;0.80799347;0.80899346;
0.80999345;0.81099343;0.81199342;0.81299341;0.81399339;0.81499338;0.81599337;0.81699336;0.81799334;0.81899333;
0.81999332;0.8209933;0.82199329;0.82299328;0.82399327;0.82499325;0.82599324;0.82699323;0.82799321;0.8289932;
0.82999319;0.83099318;0.83199316;0.83299315;0.83399314;0.83499312;0.83599311;0.8369931;0.83799309;0.83899307;
0.83999306;0.84099305;0.84199303;0.84299302;0.84399301;0.844993;0.84599298;0.84699297;0.84799296;0.84899294;
0.84999293;0.85099292;0.85199291;0.85299289;0.85399288;0.85499287;0.85599285;0.85699284;0.85799283;0.85899282;
0.8599928;0.86099279;0.86199278;0.86299276;0.86399275;0.86499274;0.86599272;0.86699271;0.8679927;0.86899269;
0.86999267;0.87099266;0.87199265;0.87299263;0.87399262;0.87499261;0.8759926;0.87699258;0.87799257;0.87899256;
0.87999254;0.88099253;0.88199252;0.88299251;0.88399249;0.88499248;0.88599247;0.88699245;0.88799244;0.88899243;
0.88999242;0.8909924;0.89199239;0.89299238;0.89399236;0.89499235;0.89599234;0.89699233;0.89799231;0.8989923;
0.89999229;0.90099227;0.90199226;0.90299225;0.90399224;0.90499222;0.90599221;0.9069922;0.90799218;0.90899217;
0.90999216;0.91099215;0.91199213;0.91299212;0.91399211;0.91499209;0.91599208;0.91699207;0.91799206;0.91899204;
0.91999203;0.92099202;0.921992;0.92299199;0.92399198;0.92499197;0.92599195;0.92699194;0.92799193;0.92899191;
0.9299919;0.93099189;0.93199188;0.93299186;0.93399185;0.93499184;0.93599182;0.93699181;0.9379918;0.93899179;
0.93999177;0.94099176;0.94199175;0.94299173;0.94399172;0.94499171;0.94599169;0.94699168;0.94799167;0.94899166;
0.94999164;0.95099163;0.95199162;0.9529916;0.95399159;0.95499158;0.95599157;0.95699155;0.95799154;0.95899153;
0.95999151;0.9609915;0.96199149;0.96299148;0.96399146;0.96499145;0.96599144;0.96699142;0.96799141;0.9689914;
0.96999139;0.97099137;0.97199136;0.97299135;0.97399133;0.97499132;0.97599131;0.9769913;0.97799128;0.97899127;
0.97999126;0.98099124;0.98199123;0.98299122;0.98399121;0.98499119;0.98599118;0.98699117;0.98799115;0.98899114;
0.98999113;0.99099112;0.9919911;0.99299109;0.99399108;0.99499106;0.99599105;0.99699104;0.99799103;0.99899101;
0.999991;      };
     };
     float_Data @[1] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_49";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="PLOT_1": value=1: val_type_fixed=0: };
       UserDataItem @[1] {name="MIN": value=0: val_type_fixed=0: };
       UserDataItem @[2] {name="MAX": value=1: val_type_fixed=0: };
      };
      name="Act";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [701] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;2.6721469e-07;9.972598e-07;2.5273087e-06;5.4256097e-06;1.0628183e-05;1.9642765e-05;3.484471e-05;5.9894082e-05;0.00010030595;
0.00016420556;0.00026329432;0.00041403982;0.00063908077;0.00096880738;0.0014430333;0.0021126324;0.0030409596;0.0043048346;0.0059948387;
0.0082146814;0.011079396;0.014712255;0.01924035;0.024788897;0.031474702;0.039398964;0.048640218;0.059247833;0.071236916;
0.084584914;0.099230662;0.11507557;0.13198753;0.14980678;0.1683533;0.18743528;0.20685776;0.22643094;0.24597716;
0.26533702;0.28437275;0.30297098;0.32104295;0.33852404;0.35537103;0.3715601;0.38708347;0.40194559;0.41616151;
0.42975271;0.44274521;0.45516786;0.46705079;0.47842398;0.48931676;0.49975771;0.50977331;0.51938874;0.5286274;
0.53751123;0.54606044;0.55429369;0.56222868;0.56988126;0.57726675;0.5843991;0.59129119;0.59795517;0.60440242;
0.61064357;0.61668801;0.62254584;0.62822479;0.63373387;0.63907987;0.6442703;0.64931226;0.65421158;0.65897483;
0.66360712;0.66811424;0.67250115;0.67677242;0.68093282;0.68498653;0.6889379;0.69279021;0.69654799;0.70021385;
0.70379198;0.70728493;0.7106958;0.7140274;0.71728295;0.72046447;0.72357488;0.72661626;0.72959137;0.73250163;
0.73534983;0.73813772;0.74086678;0.74353957;0.74615735;0.74872208;0.75123507;0.75369841;0.75611264;0.75848025;
0.76080203;0.76307899;0.76531321;0.76750565;0.76965708;0.77176887;0.77384198;0.77587789;0.77787727;0.77984107;
0.78177029;0.7836659;0.78552884;0.78735995;0.78915942;0.79092908;0.792669;0.79438025;0.79606318;0.79771876;
0.79934776;0.80095035;0.80252773;0.80407995;0.80560809;0.80711251;0.80859357;0.81005228;0.81148875;0.81290346;
0.8142972;0.81567031;0.8170228;0.81835592;0.8196696;0.82096434;0.82224071;0.82349885;0.8247394;0.82596219;
0.82716841;0.82835793;0.82953089;0.83068806;0.83182973;0.83295578;0.83406699;0.83516365;0.83624542;0.83731341;
0.8383674;0.83940798;0.84043479;0.84144902;0.8424502;0.84343863;0.84441507;0.84537917;0.84633142;0.84727186;
0.8482011;0.84911877;0.85002565;0.85092169;0.85180664;0.85268146;0.85354602;0.85440052;0.85524499;0.85607988;
0.85690486;0.85772043;0.858527;0.85932422;0.86011273;0.86089242;0.86166316;0.86242568;0.86317968;0.86392528;
0.86466324;0.86539304;0.86611468;0.86682898;0.86753559;0.86823475;0.8689267;0.86961102;0.87028855;0.8709591;
0.87162244;0.87227917;0.87292922;0.87357277;0.87420946;0.87484026;0.87546438;0.87608242;0.87669432;0.87730026;
0.87790024;0.87849444;0.87908256;0.87966537;0.88024247;0.88081419;0.8813802;0.88194108;0.88249648;0.88304681;
0.88359201;0.88413185;0.8846671;0.88519728;0.88572264;0.88624322;0.8867591;0.88727015;0.88777667;0.8882789;
0.88877612;0.88926917;0.88975799;0.89024258;0.89072263;0.89119869;0.89167076;0.89213854;0.89260221;0.89306217;
0.89351797;0.89397007;0.89441824;0.89486259;0.89530331;0.89574027;0.89617366;0.89660347;0.89702946;0.89745218;
0.89787173;0.89828765;0.89870006;0.89910913;0.89951509;0.8999176;0.90031689;0.90071321;0.90110624;0.90149623;
0.90188301;0.90226698;0.90264755;0.90302563;0.90340054;0.90377283;0.90414202;0.90450841;0.904872;0.90523303;
0.90559101;0.90594649;0.90629911;0.90664923;0.90699685;0.90734172;0.90768421;0.90802401;0.90836138;0.90869647;
0.90902877;0.90935862;0.90968651;0.91001183;0.91033447;0.9106552;0.91097373;0.91128981;0.91160369;0.9119153;
0.91222483;0.91253191;0.91283721;0.91314036;0.91344112;0.91373986;0.91403681;0.9143315;0.91462409;0.91491508;
0.91520369;0.91549045;0.91577548;0.9160583;0.91633946;0.9166187;0.91689581;0.9171713;0.917445;0.91771686;
0.91798687;0.91825515;0.91852182;0.91878664;0.91904962;0.9193114;0.91957098;0.91982877;0.92008513;0.92034006;
0.92059302;0.92084455;0.92109478;0.92134315;0.92158991;0.92183512;0.92207903;0.92232132;0.92256206;0.92280108;
0.92303878;0.92327511;0.9235099;0.92374349;0.92397547;0.9242062;0.92443514;0.92466307;0.9248895;0.92511463;
0.92533821;0.92556071;0.92578185;0.92600143;0.92622006;0.92643714;0.92665309;0.92686784;0.92708117;0.92729342;
0.92750442;0.92771411;0.92792243;0.92812979;0.92833579;0.92854083;0.92874461;0.92894715;0.92914861;0.92934883;
0.92954803;0.92974609;0.92994308;0.93013889;0.93033373;0.93052721;0.93071997;0.93091148;0.93110198;0.9312914;
0.93147969;0.93166703;0.93185329;0.93203872;0.93222284;0.93240631;0.9325887;0.93277001;0.9329505;0.93312997;
0.9333083;0.93348563;0.93366253;0.93383801;0.93401283;0.9341864;0.93435919;0.93453121;0.93470234;0.93487239;
0.93504167;0.93521029;0.9353776;0.93554425;0.93571001;0.93587488;0.93603903;0.93620241;0.93636495;0.93652648;
0.93668735;0.93684727;0.93700647;0.93716478;0.93732256;0.93747926;0.93763518;0.93779069;0.93794483;0.93809873;
0.93825161;0.93840373;0.9385553;0.93870586;0.93885595;0.93900496;0.93915361;0.93930137;0.93944842;0.93959475;
0.93974042;0.93988526;0.94002944;0.94017297;0.94031584;0.94045812;0.94059962;0.94074047;0.9408806;0.94102019;
0.94115901;0.94129711;0.9414348;0.94157177;0.94170779;0.94184351;0.94197851;0.94211298;0.94224685;0.94237983;
0.94251233;0.94264436;0.94277579;0.9429065;0.9430365;0.9431662;0.94329494;0.94342333;0.94355136;0.94367838;
0.94380504;0.94393104;0.94405657;0.94418144;0.94430596;0.94442964;0.94455302;0.94467574;0.94479781;0.94491947;
0.94504058;0.9451611;0.94528139;0.94540077;0.94551986;0.94563836;0.94575626;0.94587368;0.94599068;0.94610721;
0.94622302;0.94633859;0.94645345;0.94656795;0.94668204;0.94679528;0.94690841;0.94702089;0.94713312;0.94724464;
0.94735569;0.94746643;0.94757646;0.94768614;0.94779569;0.94790429;0.94801277;0.94812071;0.94822794;0.94833505;
0.94844157;0.94854778;0.94865346;0.94875896;0.94886357;0.94896811;0.949072;0.94917566;0.94927877;0.94938141;
0.94948363;0.94958538;0.94968706;0.94978803;0.94988883;0.94998884;0.95008892;0.95018828;0.95028728;0.95038599;
0.95048428;0.95058244;0.95067978;0.95077705;0.95087379;0.95097005;0.95106596;0.95116138;0.95125681;0.95135176;
0.95144624;0.95154041;0.95163417;0.95172733;0.95182043;0.95191324;0.95200574;0.95209765;0.95218921;0.9522804;
0.9523716;      };
     };
     float_Data @[2] {
      UserDataItem_List @*(.user_data_) {
       name="UserDataItem_List_50";
       el_typ=UserDataItem;
       el_def=0;
       UserDataItem @[0] {name="PLOT_2": value=1: val_type_fixed=0: };
      };
      name="Linear";
      col_flags=SAVE_DATA|AUTO_WIDTH;
      is_matrix=0;
      cell_geom{       };
      calc_expr {
       expr=;
      };
      dim_names {
       name="dim_names";
      [0]       };
      width=8;
      matrix_col_width=10;
      ar {
       name="ar";
      [701] 0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0;0;0;0;0;0;0;0;0;
0;0.0099742413;0.019974113;0.029973984;0.039973855;0.049973726;0.059973598;0.069973469;0.07997334;0.089973211;
0.099973083;0.10997295;0.11997283;0.1299727;0.13997257;0.14997244;0.15997231;0.16997218;0.17997205;0.18997192;
0.1999718;0.20997167;0.21997154;0.22997141;0.23997128;0.24997115;0.25997102;0.26997089;0.27997077;0.28997064;
0.29997051;0.30997038;0.31997025;0.32997012;0.33996999;0.34996986;0.35996974;0.36996961;0.37996948;0.38996935;
0.39996922;0.40996909;0.41996896;0.42996883;0.43996871;0.44996858;0.45996845;0.46996832;0.47996819;0.48996806;
0.49996793;0.5099678;0.51996768;0.52996755;0.53996742;0.54996729;0.55996716;0.56996703;0.5799669;0.58996677;
0.59996665;0.60996652;0.61996639;0.62996626;0.63996613;0.649966;0.65996587;0.66996574;0.67996562;0.68996549;
0.69996536;0.70996523;0.7199651;0.72996497;0.73996484;0.74996471;0.75996459;0.76996446;0.77996433;0.7899642;
0.79996407;0.80996394;0.81996381;0.82996368;0.83996356;0.84996343;0.8599633;0.86996317;0.87996304;0.88996291;
0.89996278;0.90996265;0.91996253;0.9299624;0.93996227;0.94996214;0.95996201;0.96996188;0.97996175;0.98996162;
0.9999615;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;1;1;1;1;1;1;1;1;1;
1;      };
     };
    };
    data_flags=SAVE_ROWS|AUTO_CALC;
    auto_load=NO_AUTO_LOAD;
    auto_load_file=;
    row_height=1;
    max_col_width=50;
    keygen 4 0=0;
    row_indexes {
     name="row_indexes";
    [701] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;24;25;26;27;28;29;
30;31;32;33;34;35;36;37;38;39;
40;41;42;43;44;45;46;47;48;49;
50;51;52;53;54;55;56;57;58;59;
60;61;62;63;64;65;66;67;68;69;
70;71;72;73;74;75;76;77;78;79;
80;81;82;83;84;85;86;87;88;89;
90;91;92;93;94;95;96;97;98;99;
100;101;102;103;104;105;106;107;108;109;
110;111;112;113;114;115;116;117;118;119;
120;121;122;123;124;125;126;127;128;129;
130;131;132;133;134;135;136;137;138;139;
140;141;142;143;144;145;146;147;148;149;
150;151;152;153;154;155;156;157;158;159;
160;161;162;163;164;165;166;167;168;169;
170;171;172;173;174;175;176;177;178;179;
180;181;182;183;184;185;186;187;188;189;
190;191;192;193;194;195;196;197;198;199;
200;201;202;203;204;205;206;207;208;209;
210;211;212;213;214;215;216;217;218;219;
220;221;222;223;224;225;226;227;228;229;
230;231;232;233;234;235;236;237;238;239;
240;241;242;243;244;245;246;247;248;249;
250;251;252;253;254;255;256;257;258;259;
260;261;262;263;264;265;266;267;268;269;
270;271;272;273;274;275;276;277;278;279;
280;281;282;283;284;285;286;287;288;289;
290;291;292;293;294;295;296;297;298;299;
300;301;302;303;304;305;306;307;308;309;
310;311;312;313;314;315;316;317;318;319;
320;321;322;323;324;325;326;327;328;329;
330;331;332;333;334;335;336;337;338;339;
340;341;342;343;344;345;346;347;348;349;
350;351;352;353;354;355;356;357;358;359;
360;361;362;363;364;365;366;367;368;369;
370;371;372;373;374;375;376;377;378;379;
380;381;382;383;384;385;386;387;388;389;
390;391;392;393;394;395;396;397;398;399;
400;401;402;403;404;405;406;407;408;409;
410;411;412;413;414;415;416;417;418;419;
420;421;422;423;424;425;426;427;428;429;
430;431;432;433;434;435;436;437;438;439;
440;441;442;443;444;445;446;447;448;449;
450;451;452;453;454;455;456;457;458;459;
460;461;462;463;464;465;466;467;468;469;
470;471;472;473;474;475;476;477;478;479;
480;481;482;483;484;485;486;487;488;489;
490;491;492;493;494;495;496;497;498;499;
500;501;502;503;504;505;506;507;508;509;
510;511;512;513;514;515;516;517;518;519;
520;521;522;523;524;525;526;527;528;529;
530;531;532;533;534;535;536;537;538;539;
540;541;542;543;544;545;546;547;548;549;
550;551;552;553;554;555;556;557;558;559;
560;561;562;563;564;565;566;567;568;569;
570;571;572;573;574;575;576;577;578;579;
580;581;582;583;584;585;586;587;588;589;
590;591;592;593;594;595;596;597;598;599;
600;601;602;603;604;605;606;607;608;609;
610;611;612;613;614;615;616;617;618;619;
620;621;622;623;624;625;626;627;628;629;
630;631;632;633;634;635;636;637;638;639;
640;641;642;643;644;645;646;647;648;649;
650;651;652;653;654;655;656;657;658;659;
660;661;662;663;664;665;666;667;668;669;
670;671;672;673;674;675;676;677;678;679;
680;681;682;683;684;685;686;687;688;689;
690;691;692;693;694;695;696;697;698;699;
700;    };
    last_sort_spec {
     name="last_sort_spec";
     ops {
      name="ops";
      el_typ=DataSortEl;
      el_def=0;
     };
    };
    row_with_hilite=-1;
   };
  };
 };
 programs {
  name="programs";
  el_typ=Program;
  el_def=0;
  tags=;
  desc=;
  debug_mode=0;
  Program @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[0].doc$$: };
   };
   name="SetDefaults";
   short_nm="SDflts";
   tags=;
   desc="restores default initial parameters in the simulation";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=taNBase;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="act_fun";
     var_type=T_HardEnum;
     int_val=1;
     object_scope=NULL;
     hard_enum_type=LeabraUnitSpec::ActFun;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="g_bar_e";
     var_type=T_Real;
     real_val=0.3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default g_bar.e value";
     init_from=NULL;
    };
    ProgVar @[2] {
     name="g_bar_l";
     var_type=T_Real;
     real_val=0.3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default g_bar.l value";
     init_from=NULL;
    };
    ProgVar @[3] {
     name="e_rev_e";
     var_type=T_Real;
     real_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default g_rev_e value";
     init_from=NULL;
    };
    ProgVar @[4] {
     name="e_rev_l";
     var_type=T_Real;
     real_val=0.3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default e_rev_l value";
     init_from=NULL;
    };
    ProgVar @[5] {
     name="noise_var";
     var_type=T_Real;
     real_val=0;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default noise val";
     init_from=NULL;
    };
    ProgVar @[6] {
     name="adapt_on";
     var_type=T_Bool;
     bool_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="exp_slope";
     var_type=T_Real;
     real_val=0.02;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[8] {
     name="spk_thr";
     var_type=T_Real;
     real_val=1.2;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[9] {
     name="n_cycles";
     var_type=T_Int;
     int_val=200;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default number of cycles";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="on_cycle";
     var_type=T_Int;
     int_val=10;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default input on cycle";
     init_from=NULL;
    };
    ProgVar @[11] {
     name="off_cycle";
     var_type=T_Int;
     int_val=160;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="default input off cycle";
     init_from=NULL;
    };
    ProgVar @[12] {
     name="unit_spec";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.networks[0].specs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[13] {
     name="settle";
     var_type=T_Object;
     object_type=Program;
     object_val=$.programs.gp[0][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[14] {
     name="MyControlPanel";
     var_type=T_Object;
     object_type=ControlPanel;
     object_val=.ctrl_panels[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    MemberAssign @[0] {
     name="MemberAssign_unitspecgbaregbare";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.g_bar.e = g_bar_e";
     obj=.programs[0].vars[12]$$;
     path="g_bar.e";
     expr {
      expr="g_bar_e";
     };
     update_after=0;
    };
    MemberAssign @[1] {
     name="MemberAssign_unitspecgbarlgbarl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.g_bar.l = g_bar_l";
     obj=$.programs[0].vars[12]$;
     path="g_bar.l";
     expr {
      expr="g_bar_l";
     };
     update_after=0;
    };
    MemberAssign @[2] {
     name="MemberAssign_unitspecereveereve";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.e_rev.e = e_rev_e";
     obj=$.programs[0].vars[12]$;
     path="e_rev.e";
     expr {
      expr="e_rev_e";
     };
     update_after=0;
    };
    MemberAssign @[3] {
     name="MemberAssign_unitspecerevlerevl";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.e_rev.l = e_rev_l";
     obj=$.programs[0].vars[12]$;
     path="e_rev.l";
     expr {
      expr="e_rev_l";
     };
     update_after=0;
    };
    MemberAssign @[4] {
     name="MemberAssign_unitspecnoisevarnoisevar";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.noise.var = noise_var";
     obj=$.programs[0].vars[12]$;
     path="noise.var";
     expr {
      expr="noise_var";
     };
     update_after=0;
    };
    MemberAssign @[5] {
     name="MemberAssign_unitspecactfunactfun";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.act_fun = act_fun";
     obj=$.programs[0].vars[12]$;
     path="act_fun";
     expr {
      expr="act_fun";
     };
     update_after=1;
    };
    MemberAssign @[6] {
     name="MemberAssign_unitspecadaptonadapton";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.adapt.on = adapt_on";
     obj=$.programs[0].vars[12]$;
     path="adapt.on";
     expr {
      expr="adapt_on";
     };
     update_after=1;
    };
    MemberAssign @[7] {
     name="MemberAssign_unitspecstponfalse";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.stp.on = false";
     obj=$.programs[0].vars[12]$;
     path="stp.on";
     expr {
      expr="false";
     };
     update_after=1;
    };
    MemberAssign @[8] {
     name="MemberAssign_unitspecspikemiscextrue";
     desc=;
     flags=OFF|CAN_REVERT_TO_CODE;
     code_string="unit_spec.spike_misc.ex = true";
     obj=$.programs[0].vars[12]$;
     path="spike_misc.ex";
     expr {
      expr="true";
     };
     update_after=1;
    };
    MemberAssign @[9] {
     name="MemberAssign_unitspecspikemis_xpslopeexpslope";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.spike_misc.exp_slope = exp_slope";
     obj=$.programs[0].vars[12]$;
     path="spike_misc.exp_slope";
     expr {
      expr="exp_slope";
     };
     update_after=0;
    };
    MemberAssign @[10] {
     name="MemberAssign_unitspecspikemiscspkthrspkthr";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="unit_spec.spike_misc.spk_thr = spk_thr";
     obj=$.programs[0].vars[12]$;
     path="spike_misc.spk_thr";
     expr {
      expr="spk_thr";
     };
     update_after=0;
    };
    MethodCall @[11] {
     name="MethodCall_settleSetVarncyclesncycles";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="settle->SetVar(\"n_cycles\", n_cycles)";
     result_var=NULL;
     obj=.programs[0].vars[13]$$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"n_cycles\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="n_cycles";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MethodCall @[12] {
     name="MethodCall_settleSetVaroncycleoncycle";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="settle->SetVar(\"on_cycle\", on_cycle)";
     result_var=NULL;
     obj=$.programs[0].vars[13]$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"on_cycle\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="on_cycle";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MethodCall @[13] {
     name="MethodCall_settleSetVaroffcycleoffcycle";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="settle->SetVar(\"off_cycle\", off_cycle)";
     result_var=NULL;
     obj=$.programs[0].vars[13]$;
     method=Program::SetVar;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="var_nm";
       required=1;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="\"off_cycle\"";
       };
      };
      ProgArg @[1] {
       arg_type=const_Variant_ref;
       type="Variant&";
       name="value";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="off_cycle";
       };
      };
     };
     meth_sig="bool SetVar(taString& var_nm, Variant& value)";
     meth_desc=" set the value of a program variable (only top-level variables in vars or args) -- can be called from within a running program";
    };
    MethodCall @[14] {
     name="MethodCall_MyControlPanelUpdateAfterEdit";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="MyControlPanel->UpdateAfterEdit()";
     result_var=NULL;
     obj=.programs[0].vars[14]$$;
     method=taBase::UpdateAfterEdit;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
     };
     meth_sig="void UpdateAfterEdit()";
     meth_desc=" (aka UAE) called after editing, or any user change to members (eg. in the interface, script)";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[1] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[1].doc$$: };
   };
   name="SpikeVsRate";
   short_nm="SpVRt";
   tags=;
   desc="compare spike vs rate code activation";
   version {
    major=8;
    minor=0;
    step=0;
   };
   author="Randall C. O'Reilly";
   email="emergent-users@grey.colorado.edu";
   flags=0;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
    DataTable @[0] {
     name="SpikeVsRate";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="g_bar_e";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
       ar {
	name="ar";
       [24] 0.1;0.125;0.15000001;0.175;0.2;0.22499999;0.25;0.27500001;0.30000001;0.32499999;
0.34999999;0.375;0.40000001;0.42500001;0.44999999;0.47499999;0.5;0.52499998;0.55000001;0.57499999;
0.60000002;0.625;0.64999998;0.67500001;       };
      };
      float_Data @[1] {
       name="spike";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
       ar {
	name="ar";
       [24] 0;0.020724449;0.11592451;0.27029899;0.31227058;0.44594964;0.47016892;0.51658452;0.682854;0.71363854;
0.75832444;0.80355322;0.81797707;0.89337254;0.87435484;0.87940645;0.88319862;0.90464896;0.90246218;0.90242559;
0.89286697;0.91200769;0.88679993;0.9100911;       };
      };
      float_Data @[2] {
       name="rate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
       ar {
	name="ar";
       [24] 6.7501003e-07;0.004480632;0.032907523;0.10491402;0.33359981;0.3900972;0.48263487;0.57305247;0.67902124;0.70468301;
0.73255712;0.77476406;0.80051434;0.83237761;0.8247425;0.85762852;0.86749327;0.87160778;0.87536728;0.89214385;
0.89431888;0.90658683;0.90592396;0.91349554;       };
      };
      float_Data @[3] {
       name="integ_fire_if";
       desc="integrate and fire I-F function";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
       ar {
	name="ar";
       [24] 1.0000002e-05;0.032673098;0.057903875;0.07474485;0.088745028;0.10095336;0.11182691;0.12163136;0.13054594;0.13870242;
0.14620288;0.15312912;0.15954831;0.16551664;0.17108177;0.1762843;0.18115944;0.18573783;0.19004613;0.19410805;
0.19794439;0.20157358;0.20501211;0.20827481;       };
      };
     };
     data_flags=SAVE_ROWS|AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     row_indexes {
      name="row_indexes";
     [24] 0;1;2;3;4;5;6;7;8;9;
10;11;12;13;14;15;16;17;18;19;
20;21;22;23;     };
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
    DataTable @[1] {
     name="SpikeVsRate_raw";
     desc=;
     data {
      name="data";
      el_typ=float_Data;
      el_def=0;
      float_Data @[0] {
       name="g_bar_e";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[1] {
       name="spike";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[2] {
       name="rate";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=8;
       matrix_col_width=10;
      };
      float_Data @[3] {
       name="integ_fire_if";
       desc="integrate and fire I-F function";
       col_flags=SAVE_DATA|AUTO_WIDTH;
       is_matrix=0;
       cell_geom{ 1;       };
       calc_expr {
	expr=;
       };
       dim_names {
	name="dim_names";
       [0]        };
       width=13;
       matrix_col_width=10;
      };
     };
     data_flags=AUTO_CALC;
     auto_load=NO_AUTO_LOAD;
     auto_load_file=;
     row_height=1;
     max_col_width=50;
     keygen 4 0=0;
     last_sort_spec {
      name="last_sort_spec";
      ops {
       name="ops";
       el_typ=DataSortEl;
       el_def=0;
      };
     };
     row_with_hilite=-1;
    };
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="network";
     var_type=T_Object;
     object_type=LeabraNetwork;
     object_val=.networks[0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="SpikeVsRate_raw";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[1].objs[1]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="SpikeVsRate";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.programs[1].objs[0]$$;
     object_scope=NULL;
     objs_ptr=1;
     flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[2] {
     name="CycleOutputData";
     var_type=T_Object;
     object_type=DataTable;
     object_val=.data.gp[1][0]$$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[3] {
     name="UnitSpec_0";
     var_type=T_Object;
     object_type=LeabraUnitSpec;
     object_val=$.networks[0].specs[0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[4] {
     name="g_bar_e_start";
     var_type=T_Real;
     real_val=0.1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[5] {
     name="g_bar_e_end";
     var_type=T_Real;
     real_val=0.7;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[6] {
     name="g_bar_e_inc";
     var_type=T_Real;
     real_val=0.025;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[7] {
     name="spike_cycle";
     var_type=T_Int;
     int_val=162;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="cycle to grab act_eq value for, for spiking run (just after end so not aritifically high)";
     init_from=NULL;
    };
    ProgVar @[8] {
     name="rate_cycle";
     var_type=T_Int;
     int_val=159;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="cycle to grab act_eq value for, for rate-code run (very end of input)";
     init_from=NULL;
    };
    ProgVar @[9] {
     name="compute_if";
     var_type=T_Bool;
     bool_val=1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc="compute the abstract integrate and fire IF curve";
     init_from=NULL;
    };
    ProgVar @[10] {
     name="if_refract_time";
     var_type=T_Real;
     real_val=3;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[11] {
     name="n_samples";
     var_type=T_Int;
     int_val=20;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[12] {
     name="noise_var";
     var_type=T_Real;
     real_val=0.1;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
    Function @[0] {
     name="Compute_IntegFireIF";
     desc="compute integrate and fire input-frequency function";
     flags=CAN_REVERT_TO_CODE;
     code_string="Compute_IntegFireIF(LeabraUnitSpec* unit_spec) returns: double";
     return_type=T_Real;
     object_type=taOBase;
     args {
      name="args";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="unit_spec";
       var_type=T_Object;
       object_type=LeabraUnitSpec;
       object_val=$.networks[0].specs[0]$;
       object_scope=NULL;
       objs_ptr=0;
       flags=LOCAL_VAR|FUN_ARG|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
     fun_code {
      name="fun_code";
      el_typ=ProgCode;
      el_def=0;
      LocalVars @[0] {
       name="LocalVars_LocalVars6vars";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="LocalVars (6 vars)";
       local_vars {
	name="local_vars";
	el_typ=ProgVar;
	el_def=0;
	ProgVar @[0] {
	 name="g_e_terms";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[1] {
	 name="e_rev_terms";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[2] {
	 name="b_a_ratio";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[3] {
	 name="log_arg";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[4] {
	 name="time_to_thr";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
	ProgVar @[5] {
	 name="freq";
	 var_type=T_Real;
	 real_val=0;
	 object_scope=NULL;
	 flags=LOCAL_VAR|USED|EDIT_VAL;
	 reference=0;
	 desc=;
	 init_from=NULL;
	};
       };
      };
      AssignExpr @[1] {
       name="AssignExpr_getermsunitspecd_reunitspecgbarl";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="g_e_terms = unit_spec.dt.vm_dt * (unit_spec.g_bar.e + unit_spec.g_bar.l)";
       result_var=.programs[1].functions[0].fun_code[0].local_vars[0]$$;
       expr {
	expr="unit_spec.dt.vm_dt * (unit_spec.g_bar.e + unit_spec.g_bar.l)";
       };
      };
      AssignExpr @[2] {
       name="AssignExpr_erevtermsunitspe_rlunitspecerevl";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="e_rev_terms = unit_spec.dt.vm_dt * (unit_spec.g_bar.e * unit_spec.e_rev.e + unit_spec.g_bar.l * unit_spec.e_rev.l)";
       result_var=.programs[1].functions[0].fun_code[0].local_vars[1]$$;
       expr {
	expr="unit_spec.dt.vm_dt * (unit_spec.g_bar.e * unit_spec.e_rev.e + unit_spec.g_bar.l * unit_spec.e_rev.l)";
       };
      };
      AssignExpr @[3] {
       name="AssignExpr_baratioerevtermsgeterms";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="b_a_ratio = e_rev_terms / g_e_terms";
       result_var=.programs[1].functions[0].fun_code[0].local_vars[2]$$;
       expr {
	expr="e_rev_terms / g_e_terms";
       };
      };
      AssignExpr @[4] {
       name="AssignExpr_logargunitspecsp_ecactthrbaratio";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="log_arg = (unit_spec.spike_misc.vm_r - b_a_ratio) / (unit_spec.act.thr - b_a_ratio)";
       result_var=.programs[1].functions[0].fun_code[0].local_vars[3]$$;
       expr {
	expr="(unit_spec.spike_misc.vm_r - b_a_ratio) / (unit_spec.act.thr - b_a_ratio)";
       };
      };
      If @[5] {
       name="If_iflogarg0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="if (log_arg > 0)";
       cond {
	expr="log_arg > 0";
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_timetothr10geter_rgifrefracttime";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="time_to_thr = (1.0 / g_e_terms) * log(log_arg) + if_refract_time";
	 result_var=.programs[1].functions[0].fun_code[0].local_vars[4]$$;
	 expr {
	  expr="(1.0 / g_e_terms) * log(log_arg) + if_refract_time";
	 };
	};
       };
      };
      Else @[6] {
       name="Else_If_iflogarg0";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="else";
       cond {
	expr=;
       };
       true_code {
	name="true_code";
	el_typ=ProgCode;
	el_def=0;
	AssignExpr @[0] {
	 name="AssignExpr_timetothr100000";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="time_to_thr = 100000";
	 result_var=$.programs[1].functions[0].fun_code[0].local_vars[4]$;
	 expr {
	  expr="100000";
	 };
	};
       };
      };
      AssignExpr @[7] {
       name="AssignExpr_freq10timetothr";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="freq = 1.0 / time_to_thr";
       result_var=.programs[1].functions[0].fun_code[0].local_vars[5]$$;
       expr {
	expr="1.0 / time_to_thr";
       };
      };
      ReturnExpr @[8] {
       name="ReturnExpr_returnfreq";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="return freq";
       expr {
	expr="freq";
       };
      };
     };
    };
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name="LocalVars_LocalVars6vars";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="LocalVars (6 vars)";
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
      ProgVar @[0] {
       name="samp";
       var_type=T_Int;
       int_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[1] {
       name="init_g_bar_e";
       var_type=T_Real;
       real_val=0;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[2] {
       name="g_bar_e";
       var_type=T_Real;
       real_val=0.1;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[3] {
       name="spike";
       var_type=T_Real;
       real_val=0.5432804226875305;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[4] {
       name="rate";
       var_type=T_Real;
       real_val=0.7449670433998108;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
      ProgVar @[5] {
       name="integ_fire_if";
       var_type=T_Real;
       real_val=0.2817447718786376;
       object_scope=NULL;
       flags=LOCAL_VAR|USED|EDIT_VAL;
       reference=0;
       desc=;
       init_from=NULL;
      };
     };
    };
    AssignExpr @[1] {
     name="AssignExpr_initgbareUnitSpec0gbare";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="init_g_bar_e = UnitSpec_0.g_bar.e";
     result_var=.programs[1].prog_code[0].local_vars[1]$$;
     expr {
      expr="UnitSpec_0.g_bar.e";
     };
    };
    MemberAssign @[2] {
     name="MemberAssign_UnitSpec0noisevarnoisevar";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="UnitSpec_0.noise.var = noise_var";
     obj=.programs[1].vars[3]$$;
     path="noise.var";
     expr {
      expr="noise_var";
     };
     update_after=1;
    };
    ResetDataRows @[3] {
     name="ResetDataRows_ResetDataRowstableSpikeVsRateraw";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="ResetDataRows:  table = SpikeVsRate_raw ";
     data_var=.programs[1].vars[0]$$;
    };
    ForLoop @[4] {
     name="ForLoop_forgbaregbaresta_ndgbaregbareinc";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="for (g_bar_e = g_bar_e_start; g_bar_e <= g_bar_e_end; g_bar_e += g_bar_e_inc)";
     loop_code {
      name="loop_code";
      el_typ=ProgCode;
      el_def=0;
      MemberAssign @[0] {
       name="MemberAssign_UnitSpec0gbaregbare";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="UnitSpec_0.g_bar.e = g_bar_e";
       obj=$.programs[1].vars[3]$;
       path="g_bar.e";
       expr {
	expr="g_bar_e";
       };
       update_after=1;
      };
      ForLoop @[1] {
       name="ForLoop_forsamp0sampnsamplessamp";
       desc=;
       flags=CAN_REVERT_TO_CODE;
       code_string="for (samp=0; samp < n_samples; samp++)";
       loop_code {
	name="loop_code";
	el_typ=ProgCode;
	el_def=0;
	ResetDataRows @[0] {
	 name="ResetDataRows_ResetDataRowstab_CycleOutputData";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="ResetDataRows:  table = CycleOutputData ";
	 data_var=.programs[1].vars[2]$$;
	};
	MemberAssign @[1] {
	 name="MemberAssign_UnitSpec0actfunL_raUnitSpecSPIKE";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="UnitSpec_0.act_fun = LeabraUnitSpec::SPIKE";
	 obj=$.programs[1].vars[3]$;
	 path="act_fun";
	 expr {
	  expr="LeabraUnitSpec::SPIKE";
	 };
	 update_after=1;
	};
	ProgramCall @[2] {
	 name="ProgramCall_LeabraSettlenetworktrue";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="LeabraSettle(network, true)";
	 prog_args {
	  name="prog_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=LeabraNetwork;
	   type="LeabraNetwork*";
	   name="network";
	   required=1;
	   def_val=;
	   prev_expr="network";
	   expr {
	    expr="network";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=bool;
	   type="bool";
	   name="fast_cycle";
	   required=1;
	   def_val=;
	   prev_expr="true";
	   expr {
	    expr="true";
	   };
	  };
	 };
	 target=$.programs.gp[0][0]$;
	 targ_ld_init="*LeabraSettle*";
	};
	MethodCall @[3] {
	 name="MethodCall_spikeCycleOutput_acteqspikecycle";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="spike = CycleOutputData->GetVal(\"act_eq\", spike_cycle)";
	 result_var=.programs[1].prog_code[0].local_vars[3]$$;
	 obj=$.programs[1].vars[2]$;
	 method=DataTable::GetVal;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="col";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"act_eq\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="row";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="spike_cycle";
	   };
	  };
	 };
	 meth_sig="const_Variant GetVal(Variant& col, int row)";
	 meth_desc=" get data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name";
	};
	ResetDataRows @[4] {
	 name="ResetDataRows_ResetDataRowstab_CycleOutputData";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="ResetDataRows:  table = CycleOutputData ";
	 data_var=$.programs[1].vars[2]$;
	};
	MemberAssign @[5] {
	 name="MemberAssign_UnitSpec0actfunL_nitSpecNOISYXX1";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="UnitSpec_0.act_fun = LeabraUnitSpec::NOISY_XX1";
	 obj=$.programs[1].vars[3]$;
	 path="act_fun";
	 expr {
	  expr="LeabraUnitSpec::NOISY_XX1";
	 };
	 update_after=1;
	};
	ProgramCall @[6] {
	 name="ProgramCall_LeabraSettlenetworktrue";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="LeabraSettle(network, true)";
	 prog_args {
	  name="prog_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=LeabraNetwork;
	   type="LeabraNetwork*";
	   name="network";
	   required=1;
	   def_val=;
	   prev_expr="network";
	   expr {
	    expr="network";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=bool;
	   type="bool";
	   name="fast_cycle";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="true";
	   };
	  };
	 };
	 target=$.programs.gp[0][0]$;
	 targ_ld_init="*LeabraSettle*";
	};
	MethodCall @[7] {
	 name="MethodCall_rateCycleOutputD_lacteqratecycle";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="rate = CycleOutputData->GetVal(\"act_eq\", rate_cycle)";
	 result_var=.programs[1].prog_code[0].local_vars[4]$$;
	 obj=$.programs[1].vars[2]$;
	 method=DataTable::GetVal;
	 meth_args {
	  name="meth_args";
	  el_typ=ProgArg;
	  el_def=0;
	  ProgArg @[0] {
	   arg_type=const_Variant_ref;
	   type="Variant&";
	   name="col";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="\"act_eq\"";
	   };
	  };
	  ProgArg @[1] {
	   arg_type=int;
	   type="int";
	   name="row";
	   required=1;
	   def_val=;
	   prev_expr=;
	   expr {
	    expr="rate_cycle";
	   };
	  };
	 };
	 meth_sig="const_Variant GetVal(Variant& col, int row)";
	 meth_desc=" get data of scalar type, in Variant form (any data type, use for Programs), for given column, row -- column can be specified as either integer index or a string that is then used to find the given column name";
	};
	If @[8] {
	 name="If_ifcomputeif";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="if (compute_if)";
	 cond {
	  expr="compute_if";
	 };
	 true_code {
	  name="true_code";
	  el_typ=ProgCode;
	  el_def=0;
	  FunctionCall @[0] {
	   name="FunctionCall_integfireifCompu_FireIFUnitSpec0";
	   desc=;
	   flags=CAN_REVERT_TO_CODE;
	   code_string="integ_fire_if = Compute_IntegFireIF(UnitSpec_0)";
	   result_var=.programs[1].prog_code[0].local_vars[5]$$;
	   fun=.programs[1].functions[0]$$;
	   fun_args {
	    name="fun_args";
	    el_typ=ProgArg;
	    el_def=0;
	    ProgArg @[0] {
	     arg_type=LeabraUnitSpec;
	     type="LeabraUnitSpec*";
	     name="unit_spec";
	     required=1;
	     def_val=;
	     prev_expr=;
	     expr {
	      expr="UnitSpec_0";
	     };
	    };
	   };
	  };
	 };
	};
	AddNewDataRow @[9] {
	 name="AddNewDataRow_AddNewRowtableSpikeVsRateraw";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Add New Row:  table = SpikeVsRate_raw ";
	 data_var=$.programs[1].vars[0]$;
	};
	DataVarProg @[10] {
	 name="DataVarProg_DataTotableSpike_var4integfireif";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="Data To:  table=SpikeVsRate_raw  row_spec=cur_row  set=to  all_matches=false  var_1=g_bar_e  var_2=spike  var_3=rate  var_4=integ_fire_if ";
	 data_var=$.programs[1].vars[0]$;
	 row_spec=CUR_ROW;
	 row_var=NULL;
	 set_data=1;
	 all_matches=0;
	 quiet=0;
	 var_1=.programs[1].prog_code[0].local_vars[2]$$;
	 var_2=$.programs[1].prog_code[0].local_vars[3]$;
	 var_3=$.programs[1].prog_code[0].local_vars[4]$;
	 var_4=$.programs[1].prog_code[0].local_vars[5]$;
	};
	DoneWritingDataRow @[11] {
	 name="DoneWritingDataRow_DoneWritingDataR_ableSpikeVsRate";
	 desc=;
	 flags=CAN_REVERT_TO_CODE;
	 code_string="DoneWritingDataRow:  table = SpikeVsRate ";
	 data_var=.programs[1].vars[1]$$;
	};
       };
       init {
	expr="samp=0";
       };
       test {
	expr="samp < n_samples";
       };
       iter {
	expr="samp++";
       };
      };
     };
     init {
      expr="g_bar_e = g_bar_e_start";
     };
     test {
      expr="g_bar_e <= g_bar_e_end";
     };
     iter {
      expr="g_bar_e += g_bar_e_inc";
     };
    };
    MemberAssign @[5] {
     name="MemberAssign_UnitSpec0gbareinitgbare";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="UnitSpec_0.g_bar.e = init_g_bar_e";
     obj=$.programs[1].vars[3]$;
     path="g_bar.e";
     expr {
      expr="init_g_bar_e";
     };
     update_after=1;
    };
    MemberAssign @[6] {
     name="MemberAssign_UnitSpec0noisevar00";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="UnitSpec_0.noise.var = 0.0";
     obj=$.programs[1].vars[3]$;
     path="noise.var";
     expr {
      expr="0.0";
     };
     update_after=1;
    };
    ProgramCall @[7] {
     name="ProgramCall_LeabraSettlenetworkfalse";
     desc="turn off fast, and plot with orig params..";
     flags=CAN_REVERT_TO_CODE;
     code_string="LeabraSettle(network, false)";
     prog_args {
      name="prog_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=LeabraNetwork;
       type="LeabraNetwork*";
       name="network";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="network";
       };
      };
      ProgArg @[1] {
       arg_type=bool;
       type="bool";
       name="fast_cycle";
       required=1;
       def_val=;
       prev_expr=;
       expr {
	expr="false";
       };
      };
     };
     target=$.programs.gp[0][0]$;
     targ_ld_init="*LeabraSettle*";
    };
    DataGroupProg @[8] {
     name="DataGroupProg_Groupfromsrctabl_ableSpikeVsRate";
     desc=;
     flags=CAN_REVERT_TO_CODE;
     code_string="Group from:  src table = SpikeVsRate_raw dest table = SpikeVsRate";
     src_table=;
     dest_table=;
     src_data_var=$.programs[1].vars[0]$;
     dest_data_var=$.programs[1].vars[1]$;
     group_spec {
      name="group_spec";
      ops {
       name="ops";
       el_typ=DataGroupEl;
       el_def=0;
       DataGroupEl @[0] {
	col_name="g_bar_e";
	name="g_bar_e_GROUP_0";
	agg {name="agg": op=GROUP: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[1] {
	col_name="spike";
	name="spike_MEAN_1";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[2] {
	col_name="rate";
	name="rate_MEAN_2";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
       DataGroupEl @[3] {
	col_name="integ_fire_if";
	name="integ_fire_if_MEAN_3";
	agg {name="agg": op=MEAN: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
       };
      };
      append_agg_name=0;
     };
    };
   };
   step_prog=.programs.gp[0][1]$$;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text=;
    html_text=;
   };
  };
  Program @[2] {
   UserDataItem_List @*(.user_data_) {
    name="UserDataItem_List_1";
    el_typ=UserData_DocLink;
    el_def=0;
    UserData_DocLink @[0] {name="DocLink": doc=.programs[2].doc$$: };
   };
   name="SaveOutput";
   short_nm="Svtpt";
   tags=;
   desc=;
   version {
    major=0;
    minor=0;
    step=0;
   };
   author=;
   email=;
   flags=NO_STOP_STEP|OBJS_UPDT_GUI;
   stop_step_cond {
    expr=;
   };
   objs {
    name="objs";
    el_typ=DataTable;
    el_def=0;
   };
   objs_vars {
    name="objs_vars";
    el_typ=ProgVar;
    el_def=0;
   };
   types {
    name="types";
    el_typ=DynEnumType;
    el_def=0;
   };
   args {
    name="args";
    el_typ=ProgVar;
    el_def=0;
   };
   vars {
    name="vars";
    el_typ=ProgVar;
    el_def=0;
    ProgVar @[0] {
     name="cycle_output_data";
     var_type=T_Object;
     object_type=DataTable;
     object_val=$.data.gp[1][0]$;
     object_scope=NULL;
     objs_ptr=0;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
    ProgVar @[1] {
     name="file_name";
     var_type=T_String;
     string_val=;
     object_scope=NULL;
     flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
     reference=0;
     desc=;
     init_from=NULL;
    };
   };
   functions {
    name="functions";
    el_typ=Function;
    el_def=0;
   };
   init_code {
    name="init_code";
    el_typ=ProgCode;
    el_def=0;
   };
   prog_code {
    name="prog_code";
    el_typ=ProgCode;
    el_def=0;
    LocalVars @[0] {
     name=;
     desc=;
     flags=0;
     code_string=;
     local_vars {
      name="local_vars";
      el_typ=ProgVar;
      el_def=0;
     };
    };
    MethodCall @[1] {
     name="MethodCall_cycleoutputdataSaveDatafilename";
     desc=;
     flags=0;
     code_string=;
     result_var=NULL;
     obj=.programs[2].vars[0]$$;
     method=DataTable::SaveData;
     meth_args {
      name="meth_args";
      el_typ=ProgArg;
      el_def=0;
      ProgArg @[0] {
       arg_type=const_taString_ref;
       type="taString&";
       name="fname";
       required=0;
       def_val="\"\"";
       prev_expr=;
       expr {
	expr="file_name";
       };
      };
      ProgArg @[1] {
       arg_type=DataTable::Delimiters;
       type="DataTable::Delimiters";
       name="delim";
       required=0;
       def_val="DataTable::TAB";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[2] {
       arg_type=bool;
       type="bool";
       name="quote_str";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
      ProgArg @[3] {
       arg_type=bool;
       type="bool";
       name="save_headers";
       required=0;
       def_val="true";
       prev_expr=;
       expr {
	expr=;
       };
      };
     };
     meth_sig="void SaveData(taString& fname, DataTable::Delimiters delim = TAB, bool quote_str = true, bool save_headers = true)";
     meth_desc=" saves data, one line per rec, with delimiter between columns, and optionally quoting strings; if save_headers then the _H: header line is saved and data lines have _D:, else they are bare";
    };
   };
   step_prog=NULL;
   step_n=1;
   doc {
    name="doc";
    desc=;
    web_doc=0;
    wiki=;
    url="local";
    full_url="local";
    text_size=1;
    text="<html>
<head></head>
<body>
== Enter Title Here ==
</body>
</html>
";
    html_text=;
   };
  };
  Program_Group @.gp[0] {
   name="LeabraAll_Std";
   el_typ=Program;
   el_def=0;
   tags="Leabra, Std, All";
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][0].doc$$: };
    };
    name="LeabraSettle";
    short_nm="Settle";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="net";
	computed=0;
	object_type=LeabraLayer;
	object=.networks[0].layers[1]$$;
	variable="units[0].net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="I_net";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].I_net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="v_m";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].v_m";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="act";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="act_eq";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].act_eq";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="spike";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].spike";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="adapt";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].adapt";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="syn_tr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_tr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="syn_nr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_nr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="syn_pr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_pr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="syn_kre";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_kre";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="vm_eq";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].v_m_eq";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][0].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="fast_cycle";
      var_type=T_Bool;
      bool_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="don't call the separate cycle program -- just run it inline -- much faster..";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="n_cycles";
      var_type=T_Int;
      int_val=200;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total number of cycles to process";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="on_cycle";
      var_type=T_Int;
      int_val=10;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="cycle number to turn input on";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="off_cycle";
      var_type=T_Int;
      int_val=160;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="cycle number to turn input off";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="cycle";
      var_type=T_Int;
      int_val=200;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="min_cycles";
      var_type=T_Int;
      int_val=15;
      object_scope=NULL;
      flags=NULL_CHECK|SAVE_VAL|EDIT_VAL;
      reference=0;
      desc="IMPORTANT: this value is obtained from the network min_cycles and min_cycles_phase2 -- change the value on the network object, not here in this program!
sets the minimum number of cycles to settle for, regardless of network state changes, etc";
      init_from=NULL;
     };
     ProgVar @[5] {
      name="send_act";
      var_type=T_Real;
      real_val=0;
      object_scope=NULL;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="sending unit activation";
      init_from=NULL;
     };
     ProgVar @[6] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
     ProgVar @[7] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[8] {
      name="net";
      var_type=T_Real;
      real_val=5.180818578704019e-23;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[9] {
      name="unit_spec_0";
      var_type=T_Object;
      object_type=LeabraUnitSpec;
      object_val=$.networks[0].specs[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
     Function @[0] {
      name="MonitorCycle";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="MonitorCycle() returns: int";
      return_type=T_Int;
      object_type=taOBase;
      args {
       name="args";
       el_typ=ProgVar;
       el_def=0;
      };
      fun_code {
       name="fun_code";
       el_typ=ProgCode;
       el_def=0;
       LocalVars @[0] {
	name="LocalVars_LocalVars0vars";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LocalVars (0 vars)";
	local_vars {
	 name="local_vars";
	 el_typ=ProgVar;
	 el_def=0;
	};
       };
       MethodCall @[1] {
	name="MethodCall_trialmondataDataUpdatetrue";
	desc="add a new blank row to the data";
	flags=CAN_REVERT_TO_CODE;
	code_string="trial_mon_data->DataUpdate(true)";
	result_var=NULL;
	obj=.programs.gp[0][0].vars[7]$$;
	method=taBase::DataUpdate;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="begin";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="true";
	  };
	 };
	};
	meth_sig="void DataUpdate(bool begin)";
	meth_desc=" bracket data value changes with (nestable) true/false calls;";
       };
       MethodCall @[2] {
	name="MethodCall_trialmondataAddBlankRow";
	desc="add a new blank row to the data";
	flags=CAN_REVERT_TO_CODE;
	code_string="trial_mon_data->AddBlankRow()";
	result_var=NULL;
	obj=$.programs.gp[0][0].vars[7]$;
	method=DataTable::AddBlankRow;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="int AddBlankRow()";
	meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
       };
       MethodCall @[3] {
	name="MethodCall_trialnetmonGetMonVals";
	desc="get the new monitor data from the network and other sources -- this does the main work";
	flags=CAN_REVERT_TO_CODE;
	code_string="trial_netmon->GetMonVals()";
	result_var=NULL;
	obj=.programs.gp[0][0].objs_vars[0]$$;
	method=NetMonitor::GetMonVals;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void GetMonVals()";
	meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
       };
       DataVarProg @[4] {
	name="DataVarProg_DataFromtabletri_netvar2var3var4";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Data From:  table=trial_mon_data  row_spec=cur_row  set=from  all_matches=false  var_1=net  var_2=?  var_3=?  var_4=? ";
	data_var=$.programs.gp[0][0].vars[7]$;
	row_spec=CUR_ROW;
	row_var=NULL;
	set_data=0;
	all_matches=0;
	quiet=0;
	var_1=.programs.gp[0][0].vars[8]$$;
	var_2=NULL;
	var_3=NULL;
	var_4=NULL;
       };
       AssignExpr @[5] {
	name="AssignExpr_netnetunitspec0gbare";
	desc="net does not contain g_bar.e anymore";
	flags=CAN_REVERT_TO_CODE;
	code_string="net = net * unit_spec_0.g_bar.e";
	result_var=$.programs.gp[0][0].vars[8]$;
	expr {
	 expr="net * unit_spec_0.g_bar.e";
	};
       };
       DataVarProg @[6] {
	name="DataVarProg_DataTotabletrial_netvar2var3var4";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="Data To:  table=trial_mon_data  row_spec=cur_row  set=to  all_matches=false  var_1=net  var_2=?  var_3=?  var_4=? ";
	data_var=$.programs.gp[0][0].vars[7]$;
	row_spec=CUR_ROW;
	row_var=NULL;
	set_data=1;
	all_matches=0;
	quiet=0;
	var_1=$.programs.gp[0][0].vars[8]$;
	var_2=NULL;
	var_3=NULL;
	var_4=NULL;
       };
       MethodCall @[7] {
	name="MethodCall_trialmondataWriteClose";
	desc="update views and other things after writing new data to monitor data table";
	flags=CAN_REVERT_TO_CODE;
	code_string="trial_mon_data->WriteClose()";
	result_var=NULL;
	obj=$.programs.gp[0][0].vars[7]$;
	method=DataTable::WriteClose;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	};
	meth_sig="void WriteClose()";
	meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
       };
       MethodCall @[8] {
	name="MethodCall_trialmondataDataUpdatefalse";
	desc="add a new blank row to the data";
	flags=CAN_REVERT_TO_CODE;
	code_string="trial_mon_data->DataUpdate(false)";
	result_var=NULL;
	obj=$.programs.gp[0][0].vars[7]$;
	method=taBase::DataUpdate;
	meth_args {
	 name="meth_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=bool;
	  type="bool";
	  name="begin";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="false";
	  };
	 };
	};
	meth_sig="void DataUpdate(bool begin)";
	meth_desc=" bracket data value changes with (nestable) true/false calls;";
       };
      };
     };
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[0][0].args[0]$$;
      local_ctr_var=.programs.gp[0][0].vars[3]$$;
      counter=Network::cycle;
      update_after=0;
     };
     MethodCall @[1] {
      name="MethodCall_trialmondataResetData";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[7]$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_networkUnBuild";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->UnBuild()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::UnBuild;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void UnBuild()";
      meth_desc=" un-build the network -- remove all units and connections -- network configuration is much faster when operating on an un-built network";
     };
     MethodCall @[1] {
      name="MethodCall_networkBuild";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Build()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Build;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Build()";
      meth_desc=" Build the network units and Connect them (calls CheckSpecs/BuildLayers/Units/Prjns and Connect)";
     };
     MethodCall @[2] {
      name="MethodCall_trialmondataResetData";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->ResetData()";
      result_var=NULL;
      obj=$.programs.gp[0][0].vars[7]$;
      method=DataTable::ResetData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void ResetData()";
      meth_desc=" deletes all the data (rows), but keeps the column structure -- this cannot be undone!";
     };
     MethodCall @[3] {
      name="MethodCall_networkInitActs";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Acts()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_Acts;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Acts()";
      meth_desc=" initialize the unit activation state variables";
     };
     MethodCall @[4] {
      name="MethodCall_networkInitWeights";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Weights()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     MethodCall @[5] {
      name="MethodCall_networkTrialInit";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Trial_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Trial_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Trial_Init()";
      meth_desc=" initialize at start of trial (init specs, Decay state)";
     };
     NetCounterInit @[6] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=$.programs.gp[0][0].args[0]$;
      local_ctr_var=$.programs.gp[0][0].vars[3]$;
      counter=Network::cycle;
      update_after=1;
     };
     MethodCall @[7] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     MethodCall @[8] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     WhileLoop @[9] {
      name="WhileLoop_whilecyclencycles";
      desc="the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (cycle < n_cycles)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       If @[0] {
	name="If_ifcycleoncyclecycleoffcycle";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (cycle >= on_cycle && cycle < off_cycle)";
	cond {
	 expr="cycle >= on_cycle && cycle < off_cycle";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_sendact10";
	  desc="on";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="send_act = 1.0";
	  result_var=.programs.gp[0][0].vars[5]$$;
	  expr {
	   expr="1.0";
	  };
	 };
	};
       };
       Else @[1] {
	name="Else_If_ifcycleoncyclecycleoffcycle";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 AssignExpr @[0] {
	  name="AssignExpr_sendact00";
	  desc="off";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="send_act = 0.0";
	  result_var=$.programs.gp[0][0].vars[5]$;
	  expr {
	   expr="0.0";
	  };
	 };
	};
       };
       If @[2] {
	name="If_iffastcycle";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (fast_cycle)";
	cond {
	 expr="fast_cycle";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 CssExpr @[0] {
	  name="CssExpr_networklayers0un_tVarsactsendact";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers[0].units[0].MyUnitVars().act = send_act;";
	  expr {
	   expr="network.layers[0].units[0].MyUnitVars().act = send_act;";
	  };
	 };
	 MethodCall @[1] {
	  name="MethodCall_networkCycleRun";
	  desc="this does all the standard leabra processing for one cycle of activation updating";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network->Cycle_Run()";
	  result_var=NULL;
	  obj=$.programs.gp[0][0].args[0]$;
	  method=LeabraNetwork::Cycle_Run;
	  meth_args {
	   name="meth_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	  meth_sig="void Cycle_Run()";
	  meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
	 };
	 CssExpr @[2] {
	  name="CssExpr_networklayers0un_tVarsactsendact_1";
	  desc="need to set agaijn for display..";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="network.layers[0].units[0].MyUnitVars().act = send_act;";
	  expr {
	   expr="network.layers[0].units[0].MyUnitVars().act = send_act;";
	  };
	 };
	 FunctionCall @[3] {
	  name="FunctionCall_MonitorCycle";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="MonitorCycle()";
	  result_var=NULL;
	  fun=.programs.gp[0][0].functions[0]$$;
	  fun_args {
	   name="fun_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
       Else @[3] {
	name="Else_If_iffastcycle";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="else";
	cond {
	 expr=;
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 ProgramCall @[0] {
	  name="ProgramCall_LeabraCyclenetworksendact";
	  desc="run the cycle program, which computes one cycle of activations";
	  flags=CAN_REVERT_TO_CODE;
	  code_string="LeabraCycle(network, send_act)";
	  prog_args {
	   name="prog_args";
	   el_typ=ProgArg;
	   el_def=0;
	   ProgArg @[0] {
	    arg_type=LeabraNetwork;
	    type="LeabraNetwork*";
	    name="network";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="network";
	    };
	   };
	   ProgArg @[1] {
	    arg_type=double;
	    type="double";
	    name="send_act";
	    required=1;
	    def_val=;
	    prev_expr=;
	    expr {
	     expr="send_act";
	    };
	   };
	  };
	  target=$.programs.gp[0][1]$;
	  targ_ld_init="*LeabraCycle*";
	 };
	 FunctionCall @[1] {
	  name="FunctionCall_MonitorCycle";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="MonitorCycle()";
	  result_var=NULL;
	  fun=$.programs.gp[0][0].functions[0]$;
	  fun_args {
	   name="fun_args";
	   el_typ=ProgArg;
	   el_def=0;
	  };
	 };
	};
       };
       NetCounterIncr @[4] {
	name="NetCounterIncr_NetCounterIncrcycle";
	desc="increment cycle counter (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: cycle";
	network_var=$.programs.gp[0][0].args[0]$;
	local_ctr_var=$.programs.gp[0][0].vars[3]$;
	counter=Network::cycle;
	update_after=1;
       };
      };
      test {
       expr="cycle < n_cycles";
      };
     };
     MethodCall @[10] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[11] {
      name="MethodCall_networkComputeMinusStats";
      desc="compute trial-level statistics";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_MinusStats()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Compute_MinusStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_MinusStats()";
      meth_desc=" compute the stats that should be computed at the end of the minus phase: minus_output_name -- typically call this using Compute_PhaseStats which does the appropriate call given the current network phase";
     };
     MethodCall @[12] {
      name="MethodCall_networkComputePlusStats";
      desc="compute trial-level statistics";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PlusStats()";
      result_var=NULL;
      obj=$.programs.gp[0][0].args[0]$;
      method=LeabraNetwork::Compute_PlusStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PlusStats()";
      meth_desc=" compute the stats that should be computed at the end of the plus phase: all the error stats: SSE, PRerr, NormErr, CosErr, ExtRew -- typically call this using Compute_PhaseStats which does the appropriate call given the current network phase";
     };
     NetUpdateView @[13] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][0].args[0]$;
      update_var=.programs.gp[0][0].vars[6]$$;
     };
    };
    step_prog=$.programs.gp[0][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[1] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][1].doc$$: };
    };
    name="LeabraCycle";
    short_nm="Cycle";
    tags="Leabra, Std";
    desc="runs one cycle of leabra processing (updating net inputs and activations)";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=taNBase;
     el_def=0;
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[1] {
      name="send_act";
      var_type=T_Real;
      real_val=0;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="sending activation value to drive on the sending unit layer";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="determines whether network views will be updated on a cycle-by-cycle basis (slow, but often quite useful for seeing how processing is proceeding)";
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     PrintExpr @[0] {
      name="PrintExpr_Printnetworkcycle";
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="Print network.cycle";
      expr {
       expr="network.cycle";
      };
      debug=0;
     };
     CssExpr @[1] {
      name="CssExpr_networklayers0un_tVarsactsendact";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[0].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[0].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[2] {
      name="CssExpr_networklayers0un_tVarsactsendact_1";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[2].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[2].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[3] {
      name="CssExpr_networklayers0un_tVarsactsendact_2";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[4].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[4].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[4] {
      name="CssExpr_networklayers0un_tVarsactsendact_3";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[6].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[6].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[5] {
      name="CssExpr_networklayers0un_tVarsactsendact_4";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[8].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[8].MyUnitVars().act = send_act;";
      };
     };
     MethodCall @[6] {
      name="MethodCall_networkCycleRun";
      desc="this does all the standard leabra processing for one cycle of activation updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Cycle_Run()";
      result_var=NULL;
      obj=.programs.gp[0][1].args[0]$$;
      method=LeabraNetwork::Cycle_Run;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Cycle_Run()";
      meth_desc=" compute cycle(s) of updating: netinput, inhibition, activations -- multiple cycles can be run depending on lthreads.n_cycles setting and whether multiple threads are actually being used -- see lthreads.n_threads_act";
     };
     CssExpr @[7] {
      name="CssExpr_networklayers0un_tVarsactsendact_5";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[0].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[0].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[8] {
      name="CssExpr_networklayers0un_tVarsactsendact_6";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[2].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[2].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[9] {
      name="CssExpr_networklayers0un_tVarsactsendact_7";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[4].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[4].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[10] {
      name="CssExpr_networklayers0un_tVarsactsendact_8";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[6].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[6].MyUnitVars().act = send_act;";
      };
     };
     CssExpr @[11] {
      name="CssExpr_networklayers0un_tVarsactsendact_9";
      desc="need to set agaijn for display..";
      flags=CAN_REVERT_TO_CODE;
      code_string="network.layers[0].units[8].MyUnitVars().act = send_act;";
      expr {
       expr="network.layers[0].units[8].MyUnitVars().act = send_act;";
      };
     };
     NetUpdateView @[12] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[0][1].args[0]$;
      update_var=$.programs.gp[0][1].vars[0]$;
     };
    };
    step_prog=$.programs.gp[0][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
   Program @[2] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[0][2].doc$$: };
    };
    name="LeabraCycleMonitor";
    short_nm="CycMnt";
    tags="Leabra, Std, Monitor";
    desc="monitor trial-level data from the network (and potentially other sources) -- stores results in datatable (TrialOutputData typically) that can be used for graph/grid views and further analysis ";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=NO_STOP_STEP;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=NetMonitor;
     el_def=0;
     NetMonitor @[0] {
      name="trial_netmon";
      items {
       name="items";
       el_typ=NetMonItem;
       el_def=0;
       NetMonItem @[0] {
	name="cycle";
	computed=0;
	object_type=LeabraNetwork;
	object=$.networks[0]$;
	variable="cycle";
	var_label=;
	name_style=AUTO_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[1] {
	name="net";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[2] {
	name="I_net";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].I_net";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[3] {
	name="v_m";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].v_m";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[4] {
	name="act";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].act";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[5] {
	name="act_eq";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].act_eq";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[6] {
	name="spike";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].spike";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[7] {
	name="adapt";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].adapt";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[8] {
	name="syn_tr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_tr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[9] {
	name="syn_nr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_nr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[10] {
	name="syn_pr";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_pr";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[11] {
	name="syn_kre";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].syn_kre";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
       NetMonItem @[12] {
	name="vm_eq";
	computed=0;
	object_type=LeabraLayer;
	object=$.networks[0].layers[1]$;
	variable="units[0].v_m_eq";
	var_label=;
	name_style=MY_NAME;
	max_name_len=6;
	options=HIDDEN_LAYERS|OUTPUT_LAYERS|TARGET_LAYERS;
	val_type=VT_FLOAT;
	matrix=0;
	matrix_geom{ 	};
	data_agg=0;
	data_src=NULL;
	agg_col {
	 col_name=;
	};
	agg {name="agg": op=NONE: rel={name="rel": rel=LESSTHANOREQUAL: val=0: val_string="": use_var=0: var=NULL: }: };
	select_rows=0;
	select_spec {
	 col_name=;
	 name="_EQUAL_";
	 on=1;
	 rel=EQUAL;
	 use_var=0;
	 cmp 0 1;
	 var=NULL;
	 enable_var=NULL;
	};
	pre_proc_1 {name="pre_proc_1": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_2 {name="pre_proc_2": opr=NONE: arg=0: lw=-1: hi=1: };
	pre_proc_3 {name="pre_proc_3": opr=NONE: arg=0: lw=-1: hi=1: };
       };
      };
      network=$.networks[0]$;
      data=$.data.gp[1][0]$;
      rmv_orphan_cols=1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=Network;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc="network to record data from";
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="trial_mon_data";
      var_type=T_Object;
      object_type=DataTable;
      object_val=$.data.gp[1][0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="data table to record trial-level data to (this program writes new data to this table!)";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="trial_netmon";
      var_type=T_Object;
      object_type=NetMonitor;
      object_val=.programs.gp[0][2].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="pointer to the NetMonitor object in objs secton of this program that contains configuration for what to record and where to get it";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="unit_spec_0";
      var_type=T_Object;
      object_type=LeabraUnitSpec;
      object_val=$.networks[0].specs[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
     ProgVar @[3] {
      name="net";
      var_type=T_Real;
      real_val=0.240000013113022;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialnetmonSetDa_lmondatanetwork";
      desc="set the network and datatable for the NetMonitor";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->SetDataNetwork(trial_mon_data, network)";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[1]$$;
      method=NetMonitor::SetDataNetwork;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=Network_ptr;
	type="Network*";
	name="net";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="network";
	};
       };
      };
      meth_sig="void SetDataNetwork(DataTable* dt, Network* net)";
      meth_desc=" set both the data table and network -- convenient for programs -- calls ResetDataTableCols too -- don't call if columns are manually added or this is adding additional rows to a table";
     };
     MethodCall @[1] {
      name="MethodCall_trialnetmonCheckConfigfalse";
      desc="check the configuration of the network monitor -- will emit warnings and errors for misconfigurations";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->CheckConfig(false)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[1]$;
      method=taBase::CheckConfig;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="quiet";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="bool CheckConfig(bool quiet = false)";
      meth_desc=" check the configuration of this object and all its children (defaults to no confirm of success)";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonUpdateMonitorstrue";
      desc="update the monitor items and data schema based on current settings of the NetMonitor object";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->UpdateMonitors(true)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[1]$;
      method=NetMonitor::UpdateMonitors;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="reset_first";
	required=0;
	def_val="false";
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void UpdateMonitors(bool reset_first = false)";
      meth_desc=" old name for UpdateDataTable";
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     MethodCall @[0] {
      name="MethodCall_trialmondataDataUpdatetrue";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->DataUpdate(true)";
      result_var=NULL;
      obj=.programs.gp[0][2].vars[0]$$;
      method=taBase::DataUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="true";
	};
       };
      };
      meth_sig="void DataUpdate(bool begin)";
      meth_desc=" bracket data value changes with (nestable) true/false calls;";
     };
     MethodCall @[1] {
      name="MethodCall_trialmondataAddBlankRow";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->AddBlankRow()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[0]$;
      method=DataTable::AddBlankRow;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="int AddBlankRow()";
      meth_desc=" add a new row to the data table, sets read (source) and write (sink) index to this last row (as in ReadItem or WriteItem), so that subsequent data routines refer to this new row, and returns row ";
     };
     MethodCall @[2] {
      name="MethodCall_trialnetmonGetMonVals";
      desc="get the new monitor data from the network and other sources -- this does the main work";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_netmon->GetMonVals()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[1]$;
      method=NetMonitor::GetMonVals;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void GetMonVals()";
      meth_desc=" get all the values and store in current row of data table -- call in program to get new data";
     };
     DataVarProg @[3] {
      name="DataVarProg_DataFromtabletri_netvar2var3var4";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="Data From:  table=trial_mon_data  row_spec=cur_row  set=from  all_matches=false  var_1=net  var_2=?  var_3=?  var_4=? ";
      data_var=$.programs.gp[0][2].vars[0]$;
      row_spec=CUR_ROW;
      row_var=NULL;
      set_data=0;
      all_matches=0;
      quiet=0;
      var_1=.programs.gp[0][2].vars[3]$$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     AssignExpr @[4] {
      name="AssignExpr_netnetunitspec0gbare";
      desc="net does not contain g_bar.e anymore";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="net = net * unit_spec_0.g_bar.e";
      result_var=$.programs.gp[0][2].vars[3]$;
      expr {
       expr="net * unit_spec_0.g_bar.e";
      };
     };
     DataVarProg @[5] {
      name="DataVarProg_DataTotabletrial_netvar2var3var4";
      desc=;
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="Data To:  table=trial_mon_data  row_spec=cur_row  set=to  all_matches=false  var_1=net  var_2=?  var_3=?  var_4=? ";
      data_var=$.programs.gp[0][2].vars[0]$;
      row_spec=CUR_ROW;
      row_var=NULL;
      set_data=1;
      all_matches=0;
      quiet=0;
      var_1=$.programs.gp[0][2].vars[3]$;
      var_2=NULL;
      var_3=NULL;
      var_4=NULL;
     };
     MethodCall @[6] {
      name="MethodCall_trialmondataWriteClose";
      desc="update views and other things after writing new data to monitor data table";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->WriteClose()";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[0]$;
      method=DataTable::WriteClose;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void WriteClose()";
      meth_desc=" closes up a write operation -- call when done writing data -- performs any post-writing cleanup/closing of files, etc";
     };
     MethodCall @[7] {
      name="MethodCall_trialmondataDataUpdatefalse";
      desc="add a new blank row to the data";
      flags=CAN_REVERT_TO_CODE;
      code_string="trial_mon_data->DataUpdate(false)";
      result_var=NULL;
      obj=$.programs.gp[0][2].vars[0]$;
      method=taBase::DataUpdate;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=bool;
	type="bool";
	name="begin";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="false";
	};
       };
      };
      meth_sig="void DataUpdate(bool begin)";
      meth_desc=" bracket data value changes with (nestable) true/false calls;";
     };
     MethodCall @[8] {
      name="MethodCall_networkDMemShare_tatrialmondata1";
      desc="only functional for dmem projects: synchronizes trial data across processes so that all distributed memory processors have the same trial-level data, despite having run only a subset of them each";
      flags=OFF|CAN_REVERT_TO_CODE;
      code_string="network->DMem_ShareTrialData(trial_mon_data, 1)";
      result_var=NULL;
      obj=.programs.gp[0][2].args[0]$$;
      method=Network::DMem_ShareTrialData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
       ProgArg @[0] {
	arg_type=DataTable_ptr;
	type="DataTable*";
	name="dt";
	required=1;
	def_val=;
	prev_expr=;
	expr {
	 expr="trial_mon_data";
	};
       };
       ProgArg @[1] {
	arg_type=int;
	type="int";
	name="n_rows";
	required=0;
	def_val="1";
	prev_expr=;
	expr {
	 expr="1";
	};
       };
      };
      meth_sig="void DMem_ShareTrialData(DataTable* dt, int n_rows = 1)";
      meth_desc=" share trial data from given datatable across the trial-level dmem communicator (outer loop) -- each processor gets data from all other processors; if called every trial with n_rows = 1, data will be identical to non-dmem; if called at end of epoch with n_rows = -1 data will be grouped by processor but this is more efficient";
     };
    };
    step_prog=NULL;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
  Program_Group @.gp[1] {
   name="ComplexInputs";
   el_typ=Program;
   el_def=0;
   tags=;
   desc="The full set of programs for training a standard Leabra network";
   debug_mode=0;
   Program @[0] {
    UserDataItem_List @*(.user_data_) {
     name=;
     el_typ=UserData_DocLink;
     el_def=0;
     UserData_DocLink @[0] {name="DocLink": doc=.programs.gp[1][0].doc$$: };
    };
    name="ComplexSettle";
    short_nm="CmpStt";
    tags="Leabra, Std";
    desc="iterates over cycles of updating until network has settled into a stable state, or output activations have exceeded a threshold";
    version {
     major=0;
     minor=0;
     step=0;
    };
    author="Randall C. O'Reilly";
    email="emergent-users@grey.colorado.edu";
    flags=0;
    stop_step_cond {
     expr=;
    };
    objs {
     name="objs";
     el_typ=DataTable;
     el_def=0;
     DataTable @[0] {
      name="InputTiming";
      desc=;
      data {
       name="data";
       el_typ=float_Data;
       el_def=0;
       float_Data @[0] {
	name="cycle";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 name="ar";
	[4] 0;10;100;150;	};
       };
       float_Data @[1] {
	name="value";
	col_flags=SAVE_DATA|AUTO_WIDTH;
	is_matrix=0;
	cell_geom{ 1;	};
	calc_expr {
	 expr=;
	};
	dim_names {
	 name="dim_names";
	[0] 	};
	width=8;
	matrix_col_width=10;
	ar {
	 name="ar";
	[4] 0;0.80000001;0;0.80000001;	};
       };
      };
      data_flags=SAVE_ROWS|AUTO_CALC;
      auto_load=NO_AUTO_LOAD;
      auto_load_file=;
      row_height=1;
      max_col_width=50;
      keygen 4 0=0;
      row_indexes {
       name="row_indexes";
      [4] 0;1;2;3;      };
      last_sort_spec {
       name="last_sort_spec";
       ops {
	name="ops";
	el_typ=DataSortEl;
	el_def=0;
       };
      };
      row_with_hilite=-1;
     };
    };
    objs_vars {
     name="objs_vars";
     el_typ=ProgVar;
     el_def=0;
    };
    types {
     name="types";
     el_typ=DynEnumType;
     el_def=0;
    };
    args {
     name="args";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="network";
      var_type=T_Object;
      object_type=LeabraNetwork;
      object_val=$.networks[0]$;
      object_scope=NULL;
      objs_ptr=0;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL|PGRM_ARG;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    vars {
     name="vars";
     el_typ=ProgVar;
     el_def=0;
     ProgVar @[0] {
      name="n_cycles";
      var_type=T_Int;
      int_val=200;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="total number of cycles to process";
      init_from=NULL;
     };
     ProgVar @[1] {
      name="cycle";
      var_type=T_Int;
      int_val=200;
      object_scope=NULL;
      flags=CTRL_PANEL|CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="current cycle of settling (local loop counter)";
      init_from=NULL;
     };
     ProgVar @[2] {
      name="send_act";
      var_type=T_Real;
      real_val=0.800000011920929;
      object_scope=NULL;
      flags=CTRL_READ_ONLY|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="sending unit activation";
      init_from=NULL;
     };
     ProgVar @[3] {
      name="update_net_view";
      var_type=T_Bool;
      bool_val=1;
      object_scope=NULL;
      flags=CTRL_PANEL|NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc="if true, will update network views at end of settling";
      init_from=NULL;
     };
     ProgVar @[4] {
      name="InputTiming";
      var_type=T_Object;
      object_type=DataTable;
      object_val=.programs.gp[1][0].objs[0]$$;
      object_scope=NULL;
      objs_ptr=1;
      flags=NULL_CHECK|SAVE_VAL|USED|EDIT_VAL;
      reference=0;
      desc=;
      init_from=NULL;
     };
    };
    functions {
     name="functions";
     el_typ=Function;
     el_def=0;
    };
    init_code {
     name="init_code";
     el_typ=ProgCode;
     el_def=0;
     NetCounterInit @[0] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=.programs.gp[1][0].args[0]$$;
      local_ctr_var=.programs.gp[1][0].vars[1]$$;
      counter=Network::cycle;
      update_after=0;
     };
    };
    prog_code {
     name="prog_code";
     el_typ=ProgCode;
     el_def=0;
     LocalVars @[0] {
      name="LocalVars_LocalVars3vars";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="LocalVars (3 vars)";
      local_vars {
       name="local_vars";
       el_typ=ProgVar;
       el_def=0;
       ProgVar @[0] {
	name="input_row";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[1] {
	name="nxt_cycle";
	var_type=T_Int;
	int_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
       ProgVar @[2] {
	name="nxt_val";
	var_type=T_Real;
	real_val=0;
	object_scope=NULL;
	flags=LOCAL_VAR|USED|EDIT_VAL;
	reference=0;
	desc=;
	init_from=NULL;
       };
      };
     };
     MethodCall @[1] {
      name="MethodCall_networkInitActs";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Acts()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=Network::Init_Acts;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Acts()";
      meth_desc=" initialize the unit activation state variables";
     };
     MethodCall @[2] {
      name="MethodCall_networkInitWeights";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_Weights()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=Network::Init_Weights;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_Weights()";
      meth_desc=" Initialize the weights -- also inits acts, counters and stats -- does unit level threaded and then does Layers after";
     };
     NetCounterInit @[3] {
      name="NetCounterInit_NetCounterInitcycle";
      desc="initialize local cycle counter and corresponding counter on network";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Counter Init: cycle";
      network_var=$.programs.gp[1][0].args[0]$;
      local_ctr_var=$.programs.gp[1][0].vars[1]$;
      counter=Network::cycle;
      update_after=1;
     };
     MethodCall @[4] {
      name="MethodCall_networkInitInputData";
      desc="resets input data, before getting new external inputs data from apply inputs call";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Init_InputData()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=Network::Init_InputData;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Init_InputData()";
      meth_desc=" Initializes external and target inputs";
     };
     MethodCall @[5] {
      name="MethodCall_networkQuarterInit";
      desc="initializes various counters at start of settling";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Init()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Quarter_Init;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Init()";
      meth_desc=" initialize network for quarter-level processing (hard clamp, netscale)";
     };
     AssignExpr @[6] {
      name="AssignExpr_inputrow0";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="input_row = 0";
      result_var=.programs.gp[1][0].prog_code[0].local_vars[0]$$;
      expr {
       expr="0";
      };
     };
     AssignExpr @[7] {
      name="AssignExpr_nxtcycleInputTimingcycleinputrow";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="nxt_cycle = InputTiming[\"cycle\"][input_row]";
      result_var=.programs.gp[1][0].prog_code[0].local_vars[1]$$;
      expr {
       expr="InputTiming[\"cycle\"][input_row]";
      };
     };
     AssignExpr @[8] {
      name="AssignExpr_nxtvalInputTimingvalueinputrow";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="nxt_val = InputTiming[\"value\"][input_row]";
      result_var=.programs.gp[1][0].prog_code[0].local_vars[2]$$;
      expr {
       expr="InputTiming[\"value\"][input_row]";
      };
     };
     AssignExpr @[9] {
      name="AssignExpr_sendactnxtval";
      desc=;
      flags=CAN_REVERT_TO_CODE;
      code_string="send_act = nxt_val";
      result_var=.programs.gp[1][0].vars[2]$$;
      expr {
       expr="nxt_val";
      };
     };
     WhileLoop @[10] {
      name="WhileLoop_whilecyclencycles";
      desc="the main loop over cycles of updating";
      flags=CAN_REVERT_TO_CODE;
      code_string="while (cycle < n_cycles)";
      loop_code {
       name="loop_code";
       el_typ=ProgCode;
       el_def=0;
       If @[0] {
	name="If_ifcyclenxtcycle";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="if (cycle == nxt_cycle)";
	cond {
	 expr="cycle == nxt_cycle";
	};
	true_code {
	 name="true_code";
	 el_typ=ProgCode;
	 el_def=0;
	 If @[0] {
	  name="If_ifinputrowInputTimingrows1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="if (input_row >= InputTiming.rows-1)";
	  cond {
	   expr="input_row >= InputTiming.rows-1";
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   AssignExpr @[0] {
	    name="AssignExpr_sendactnxtval";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="send_act = nxt_val";
	    result_var=$.programs.gp[1][0].vars[2]$;
	    expr {
	     expr="nxt_val";
	    };
	   };
	   AssignExpr @[1] {
	    name="AssignExpr_nxtcycle1";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="nxt_cycle = -1";
	    result_var=$.programs.gp[1][0].prog_code[0].local_vars[1]$;
	    expr {
	     expr="-1";
	    };
	   };
	  };
	 };
	 Else @[1] {
	  name="Else_If_ifinputrowInputTimingrows1";
	  desc=;
	  flags=CAN_REVERT_TO_CODE;
	  code_string="else";
	  cond {
	   expr=;
	  };
	  true_code {
	   name="true_code";
	   el_typ=ProgCode;
	   el_def=0;
	   VarIncr @[0] {
	    name="VarIncr_inputrow1";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="input_row += 1";
	    var=$.programs.gp[1][0].prog_code[0].local_vars[0]$;
	    expr {
	     expr="1";
	    };
	   };
	   AssignExpr @[1] {
	    name="AssignExpr_sendactnxtval";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="send_act = nxt_val";
	    result_var=$.programs.gp[1][0].vars[2]$;
	    expr {
	     expr="nxt_val";
	    };
	   };
	   AssignExpr @[2] {
	    name="AssignExpr_nxtcycleInputTimingcycleinputrow";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="nxt_cycle = InputTiming[\"cycle\"][input_row]";
	    result_var=$.programs.gp[1][0].prog_code[0].local_vars[1]$;
	    expr {
	     expr="InputTiming[\"cycle\"][input_row]";
	    };
	   };
	   AssignExpr @[3] {
	    name="AssignExpr_nxtvalInputTimingvalueinputrow";
	    desc=;
	    flags=CAN_REVERT_TO_CODE;
	    code_string="nxt_val = InputTiming[\"value\"][input_row]";
	    result_var=$.programs.gp[1][0].prog_code[0].local_vars[2]$;
	    expr {
	     expr="InputTiming[\"value\"][input_row]";
	    };
	   };
	  };
	 };
	};
       };
       ProgramCall @[1] {
	name="ProgramCall_LeabraCyclenetworksendact";
	desc="run the cycle program, which computes one cycle of activations";
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycle(network, send_act)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=LeabraNetwork;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	 ProgArg @[1] {
	  arg_type=double;
	  type="double";
	  name="send_act";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="send_act";
	  };
	 };
	};
	target=$.programs.gp[0][1]$;
	targ_ld_init="*LeabraCycle*";
       };
       ProgramCall @[2] {
	name="ProgramCall_LeabraCycleMonitornetwork";
	desc=;
	flags=CAN_REVERT_TO_CODE;
	code_string="LeabraCycleMonitor(network)";
	prog_args {
	 name="prog_args";
	 el_typ=ProgArg;
	 el_def=0;
	 ProgArg @[0] {
	  arg_type=Network;
	  type="LeabraNetwork*";
	  name="network";
	  required=1;
	  def_val=;
	  prev_expr=;
	  expr {
	   expr="network";
	  };
	 };
	};
	target=.programs.gp[0][2]$$;
	targ_ld_init="*LeabraCycleMonitor*";
       };
       NetUpdateView @[3] {
	name="NetUpdateView_NetUpdateView";
	desc="update network views, if update_net_view == true";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Update View";
	network_var=$.programs.gp[1][0].args[0]$;
	update_var=.programs.gp[1][0].vars[3]$$;
       };
       NetCounterIncr @[4] {
	name="NetCounterIncr_NetCounterIncrcycle";
	desc="increment cycle counter (also on network)";
	flags=CAN_REVERT_TO_CODE;
	code_string="Net Counter Incr: cycle";
	network_var=$.programs.gp[1][0].args[0]$;
	local_ctr_var=$.programs.gp[1][0].vars[1]$;
	counter=Network::cycle;
	update_after=1;
       };
       IfContinue @[5] {
	name="IfContinue_ifcyclemincyclescontinue";
	desc="avoid subsequent stopping criteria if below min_cycles";
	flags=OFF|CAN_REVERT_TO_CODE;
	code_string="if(cycle < min_cycles) continue";
	cond {
	 expr="cycle < min_cycles";
	};
       };
       IfBreak @[6] {
	name="IfBreak_ifnetworkmaxdane_ctstopcritbreak";
	desc="stopping criterion for settling: based either on maximum change in activation (maxda) or on the maximum activation value in the network getting over threshold (which ever comes first).  Set either parmeter to values that are always false (e.g., trg_max_act_stopcrit = -1) to eliminate associated source of criterion for stopping settling.";
	flags=OFF|CAN_REVERT_TO_CODE;
	code_string="if((network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)) break";
	cond {
	 expr="(network.maxda < network.maxda_stopcrit) ||
 (network.trg_max_act > network.trg_max_act_stopcrit)";
	};
       };
      };
      test {
       expr="cycle < n_cycles";
      };
     };
     MethodCall @[11] {
      name="MethodCall_networkQuarterFinal";
      desc="perform final operations at end of settling (storing final activations, etc)";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Quarter_Final()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Quarter_Final;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Quarter_Final()";
      meth_desc=" do final processing after each quarter: ";
     };
     MethodCall @[12] {
      name="MethodCall_networkComputeMinusStats";
      desc="compute trial-level statistics";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_MinusStats()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_MinusStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_MinusStats()";
      meth_desc=" compute the stats that should be computed at the end of the minus phase: minus_output_name -- typically call this using Compute_PhaseStats which does the appropriate call given the current network phase";
     };
     MethodCall @[13] {
      name="MethodCall_networkComputePlusStats";
      desc="compute trial-level statistics";
      flags=CAN_REVERT_TO_CODE;
      code_string="network->Compute_PlusStats()";
      result_var=NULL;
      obj=$.programs.gp[1][0].args[0]$;
      method=LeabraNetwork::Compute_PlusStats;
      meth_args {
       name="meth_args";
       el_typ=ProgArg;
       el_def=0;
      };
      meth_sig="void Compute_PlusStats()";
      meth_desc=" compute the stats that should be computed at the end of the plus phase: all the error stats: SSE, PRerr, NormErr, CosErr, ExtRew -- typically call this using Compute_PhaseStats which does the appropriate call given the current network phase";
     };
     NetUpdateView @[14] {
      name="NetUpdateView_NetUpdateView";
      desc="update network views, if update_net_view == true";
      flags=CAN_REVERT_TO_CODE;
      code_string="Net Update View";
      network_var=$.programs.gp[1][0].args[0]$;
      update_var=$.programs.gp[1][0].vars[3]$;
     };
    };
    step_prog=$.programs.gp[0][1]$;
    step_n=1;
    doc {
     name="doc";
     desc=;
     web_doc=0;
     wiki=;
     url="local";
     full_url="local";
     text_size=1;
     text=;
     html_text=;
    };
   };
  };
 };
 viewers {
  name="viewers";
  el_typ=MainWindowViewer;
  el_def=0;
  MainWindowViewer @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
    UserDataItem @[1] {name="view_win_top": value=0.01947308: val_type_fixed=0: };
    UserDataItem @[2] {name="view_win_wd": value=0.9986111: val_type_fixed=0: };
    UserDataItem @[3] {name="view_win_ht": value=0.7961054: val_type_fixed=0: };
    UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
    UserDataItem @[5] {name="view_splitter_state": value=AAAA/wAAAAEAAAADAAABSgAAArkAAAGMAQAAAAYBAAAAAQE=: val_type_fixed=0: };
   };
   name="Browser";
   m_data=.$$;
   cur_font_size=12;
   visible=1;
   win_name=".projects[\"layer_fffb\"] - layer_fffb.proj";
   m_is_root=0;
   m_is_viewer_xor_browser=0;
   m_is_proj_viewer=1;
   m_is_dialog=0;
   revert_to_tab_no=-1;
   toolbars {
    name="toolbars";
    el_typ=ToolBar;
    el_def=0;
    ToolBar @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_visible": value=1: val_type_fixed=0: };
     };
     name="Application";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     lft=0;
     top=0;
     o=Horizontal;
    };
   };
   frames {
    name="frames";
    el_typ=BrowseViewerTaBase;
    el_def=0;
    BrowseViewerTaBase @[0] {
     name="Navigator";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     root_typ=LeabraProject;
     root_md=NULL;
     m_root=$.$;
    };
    PanelViewer @[1] {
     name="Editor";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
    };
    T3PanelViewer @[2] {
     UserDataItem_List @*(.user_data_) {
      name="UserDataItem_List_19";
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_frame_selected": value=1: val_type_fixed=0: };
      UserDataItem @[1] {name="view_panel_selected": value=1: val_type_fixed=0: };
     };
     name="Visualizer";
     m_data=NULL;
     cur_font_size=12;
     visible=1;
     panels {
      name="panels";
      el_typ=T3Panel;
      el_def=0;
      T3Panel @[0] {
       name="LayerNet";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=NetView;
	 el_def=0;
	 NetView @[0] {
	  name="LayerNet_View";
	  m_data=$.networks[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=1: y=0: z=0: rot=0.35: }: translate={x=0: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  display=1;
	  lay_layout=THREE_D;
	  lay_mv=1;
	  net_text=0;
	  show_iconified=0;
	  net_text_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=0: y=-0.5: z=0: }: };
	  net_text_rot=0;
	  cur_unit_vals{ act;	  };
	  hot_vars{ act;net;act_eq;act_nd;r.wt;gc_i;I_net;v_m;adapt;E_i;syn_tr;syn_nr;syn_pr;syn_kre;	  };
	  unit_src_path=".layers[1].units[3]";
	  con_type=ANY_CON;
	  hist_idx=0;
	  hist_save=1;
	  hist_max=100;
	  hist_ff=5;
	  movie_size {x=720: y=720: };
	  unit_disp_mode=UDM_BLOCK;
	  unit_text_disp=UTD_VALUES;
	  max_size {x=10: y=1: z=1.5: };
	  max_size2d {x=10: y=4: z=1: };
	  eff_max_size {x=10: y=1: z=1.5: };
	  font_sizes {net_name=0.05: net_vals=0.05: layer=0.04: layer_min=0.01: layer_vals=0.03: prjn=0.01: unit=0.03: un_nm_len=3: };
	  view_params {xy_square=0: unit_spacing=0.05: prjn_disp=L_R_F: prjn_name=0: prjn_width=0.002: prjn_trans=0.5: lay_trans=0.4: unit_trans=0.4: laygp_width=1: show_laygp=1: };
	  wt_line_disp=0;
	  wt_line_width=4;
	  wt_line_thr=0.2;
	  wt_line_swt=0;
	  wt_prjn_k_un=4;
	  wt_prjn_k_gp=1;
	  wt_prjn_lay=NULL;
	  snap_bord_disp=0;
	  snap_bord_width=4;
	  scale {
	   name="scale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=0;
	   last_max=0;
	   range=1;
	   zero=0;
	   spec=.colorspecs["C_ColdHot"]$$<ColorScaleSpec,C_ColdHot>;
	   auto_scale=0;
	  };
	  scale_ranges {
	   name="scale_ranges";
	   el_typ=ScaleRange;
	   el_def=0;
	   ScaleRange @[0] {
	    var_name="act";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[1] {
	    var_name="ext";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[2] {
	    var_name="net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[3] {
	    var_name="v_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[4] {
	    var_name="act_m";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[5] {
	    var_name="adapt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[6] {
	    var_name="act_eq";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[7] {
	    var_name="act_nd";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[8] {
	    var_name="r.wt";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[9] {
	    var_name="gc_i";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[10] {
	    var_name="I_net";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[11] {
	    var_name="E_i";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[12] {
	    var_name="syn_tr";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[13] {
	    var_name="syn_nr";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[14] {
	    var_name="syn_pr";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	   ScaleRange @[15] {
	    var_name="syn_kre";
	    auto_scale=0;
	    min=-1;
	    max=1;
	   };
	  };
	  lay_disp_modes{ Input=;Receiver=;	  };
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=0.5: y=0.5640469: z=1.702481: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.785078;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[1] {
       name="CycleOutputData";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="CycleOutputData_Graph";
	  m_data=$.data.gp[1][0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="cycle";
	    m_data=.data.gp[1][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=200: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="net";
	    m_data=.data.gp[1][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=-0.1: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="I_net";
	    m_data=.data.gp[1][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=-0.0816134: fix_max=0: max=1.77984e+8: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="v_m";
	    m_data=.data.gp[1][0].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.167402: fix_max=0: max=1.03344: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[4] {
	    name="act";
	    m_data=.data.gp[1][0].data[4]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[5] {
	    name="act_eq";
	    m_data=.data.gp[1][0].data[5]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.793791: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[6] {
	    name="spike";
	    m_data=.data.gp[1][0].data[6]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[7] {
	    name="adapt";
	    m_data=.data.gp[1][0].data[7]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=2.53701e-5: fix_max=0: max=0.0642223: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[8] {
	    name="syn_tr";
	    m_data=.data.gp[1][0].data[8]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[9] {
	    name="syn_nr";
	    m_data=.data.gp[1][0].data[9]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[10] {
	    name="syn_pr";
	    m_data=.data.gp[1][0].data[10]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.1: fix_max=0: max=0.87559: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[11] {
	    name="syn_kre";
	    m_data=.data.gp[1][0].data[11]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.013119: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[12] {
	    name="vm_eq";
	    m_data=.data.gp[1][0].data[12]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0.122792: fix_max=0: max=0.622351: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=199: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=0;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1.5;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="cycle";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=1: min=0: fix_max=1: max=200: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1.5;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="net";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=-0.1: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="I_net";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=-0.08456196: fix_max=0: max=0.169958: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="v_m";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.1769758: fix_max=0: max=0.4999565: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="act";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.6560373: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="act_eq";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.6560373: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="spike";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="adapt";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=2.536731e-5: fix_max=0: max=0.05334343: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="syn_tr";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=1: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="vm_eq";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0.122792: fix_max=0: max=0.622351: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="CycleOutputData_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="CycleOutputData_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="CycleOutputData_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="CycleOutputData_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="CycleOutputData_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="CycleOutputData_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="CycleOutputData_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="CycleOutputData_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="CycleOutputData_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="CycleOutputData_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="CycleOutputData_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="CycleOutputData_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="CycleOutputData_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="CycleOutputData_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="CycleOutputData_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="CycleOutputData_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.685978: y=0.4449999: z=2.08651: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=2.09901;
	};
	T3SavedView @[1] {
	 name="Cmpr";
	 view_saved=1;
	 pos {x=1.752822: y=1.1935: z=3.332426: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=3.322426;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[2] {
       name="UnitSpec_0_ActFmNetFun";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="UnitSpec_0_ActFmNetFun_Graph";
	  m_data=.data.gp[2][0]$$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="Net";
	    m_data=.data.gp[2][0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0.999991: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="Act";
	    m_data=.data.gp[2][0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="Linear";
	    m_data=.data.gp[2][0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=700: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE;
	  negative_draw=0;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="Net";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0.3: fix_max=0: max=0.999991: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Act";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="Linear";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="UnitSpec_0_ActFmNetFun_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="UnitSpec_0_ActFmNetFun_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.4275: y=0.499: z=1.624621: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.637121;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
      T3Panel @[3] {
       name="SpikeVsRate";
       m_data=NULL;
       cur_font_size=12;
       visible=1;
       root_view {
	name="root_view";
	m_data=NULL;
	cur_font_size=12;
	m_transform=NULL;
	children {
	 name="children";
	 el_typ=GraphTableView;
	 el_def=0;
	 GraphTableView @[0] {
	  name="SpikeVsRate_Graph";
	  m_data=$.programs[1].objs[0]$;
	  cur_font_size=12;
taTransform @*(.m_transform) {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  children {
	   name="children";
	   el_typ=GraphColView;
	   el_def=0;
	   GraphColView @[0] {
	    name="g_bar_e";
	    m_data=.programs[1].objs[0].data[0]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[1] {
	    name="spike";
	    m_data=.programs[1].objs[0].data[1]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[2] {
	    name="rate";
	    m_data=.programs[1].objs[0].data[2]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	   GraphColView @[3] {
	    name="integ_fire_if";
	    m_data=.programs[1].objs[0].data[3]$$;
	    cur_font_size=12;
	    m_transform=NULL;
	    visible=1;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    data_range {min=0: max=0: };
	   };
	  };
	  main_xform {scale={x=1: y=1: z=1: }: rotate={x=0: y=0: z=1: rot=0: }: translate={x=1: y=0: z=0: }: };
	  annotations {
	   name="annotations";
	   el_typ=T3Annotation;
	   el_def=0;
	  };
	  annote_children {
	   name="annote_children";
	   el_typ=T3DataView;
	   el_def=0;
	  };
	  view_rows=10000;
	  view_range {min=0: max=23: };
	  page_rows=0;
	  display_on=1;
	  manip_ctrl_on=1;
	  graph_type=XY;
	  plot_style=LINE_AND_POINTS;
	  negative_draw=1;
	  negative_draw_z=1;
	  line_width=2;
	  point_size=0.01;
	  point_spacing=1;
	  solid_lines=0;
	  bar_space=0.2;
	  bar_depth=0.01;
	  label_spacing=-1;
	  string_spacing=1;
	  width=1;
	  depth=1;
	  axis_font_size=0.05;
	  label_font_size=0.04;
	  x_axis_label_rot=0;
	  x_axis {
	   name="x_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=X;
	   col_name="g_bar_e";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0.1: fix_max=0: max=0.675: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  z_axis {
	   name="z_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Z;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  tot_plots=16;
	  plots {
	   name="plots";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="SpikeVsRate_Graph_plot_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="rate";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="SpikeVsRate_Graph_plot_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=1;
	    axis=Y;
	    col_name="spike";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=1: max=1: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="SpikeVsRate_Graph_plot_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name="integ_fire_if";
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=1: min=0: fix_max=0: max=0.208275: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=DIAMOND;
	    alt_y=1;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="SpikeVsRate_Graph_plot_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="SpikeVsRate_Graph_plot_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="SpikeVsRate_Graph_plot_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="SpikeVsRate_Graph_plot_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="SpikeVsRate_Graph_plot_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="SpikeVsRate_Graph_plot_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="SpikeVsRate_Graph_plot_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="red": r=1: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=SQUARE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="SpikeVsRate_Graph_plot_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="blue": r=0: g=0: b=1: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=DIAMOND;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="SpikeVsRate_Graph_plot_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="green3": r=0: g=0.8039216: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_UP;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="SpikeVsRate_Graph_plot_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="purple": r=0.627451: g=0.1254902: b=0.9411765: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=TRIANGLE_DN;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="SpikeVsRate_Graph_plot_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="orange": r=1: g=0.6470588: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=PLUS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="SpikeVsRate_Graph_plot_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="brown": r=0.6470588: g=0.1647059: b=0.1647059: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=CROSS;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="SpikeVsRate_Graph_plot_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="chartreuse": r=0.4980392: g=1: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=DOT;
	    point_style=STAR;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  errbars {
	   name="errbars";
	   el_typ=GraphPlotView;
	   el_def=0;
	   GraphPlotView @[0] {
	    name="SpikeVsRate_Graph_err_1";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[1] {
	    name="SpikeVsRate_Graph_err_2";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[2] {
	    name="SpikeVsRate_Graph_err_3";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[3] {
	    name="SpikeVsRate_Graph_err_4";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[4] {
	    name="SpikeVsRate_Graph_err_5";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[5] {
	    name="SpikeVsRate_Graph_err_6";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[6] {
	    name="SpikeVsRate_Graph_err_7";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[7] {
	    name="SpikeVsRate_Graph_err_8";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[8] {
	    name="SpikeVsRate_Graph_err_9";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[9] {
	    name="SpikeVsRate_Graph_err_10";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[10] {
	    name="SpikeVsRate_Graph_err_11";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[11] {
	    name="SpikeVsRate_Graph_err_12";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[12] {
	    name="SpikeVsRate_Graph_err_13";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[13] {
	    name="SpikeVsRate_Graph_err_14";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[14] {
	    name="SpikeVsRate_Graph_err_15";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	   GraphPlotView @[15] {
	    name="SpikeVsRate_Graph_err_16";
	    m_data=NULL;
	    cur_font_size=12;
	    m_transform=NULL;
	    on=0;
	    axis=Y;
	    col_name=;
	    col_name_good=;
	    is_string=0;
	    is_matrix=0;
	    n_cells=1;
	    matrix_cell=0;
	    fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	    show_axis_label=1;
	    show_alt_axis_label=1;
	    color {name="black": r=0: g=0: b=0: a=1: desc="": };
	    flip=0;
	    n_ticks=10;
	    axis_length=1;
	    line_style=SOLID;
	    point_style=CIRCLE;
	    alt_y=0;
	    axis_label=;
	    alt_axis_label=;
	   };
	  };
	  x_axis_label=;
	  y_axis_label=;
	  alt_y_axis_label=;
	  z_axis_label=;
	  err_spacing=1;
	  err_bar_width=0.02;
	  color_mode=FIXED;
	  color_gp_use_y=0;
	  color_axis {
	   name="color_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=1;
	   axis=Y;
	   col_name="g_bar_e";
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0.1: fix_max=0: max=0.48: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  colorscale {
	   name="colorscale";
	   chunks=133;
	   min=-1;
	   max=1;
	   last_min=-1;
	   last_max=1;
	   range=0;
	   zero=0;
	   spec=$.colorspecs["C_ColdHot"]$;
	   auto_scale=0;
	  };
	  raster_axis {
	   name="raster_axis";
	   m_data=NULL;
	   cur_font_size=12;
	   m_transform=NULL;
	   on=0;
	   axis=Y;
	   col_name=;
	   col_name_good=;
	   is_string=0;
	   is_matrix=0;
	   n_cells=1;
	   matrix_cell=0;
	   fixed_range {fix_min=0: min=0: fix_max=0: max=0: };
	   show_axis_label=1;
	   show_alt_axis_label=1;
	   color {name="black": r=0: g=0: b=0: a=1: desc="": };
	   flip=0;
	   n_ticks=10;
	   axis_length=1;
	   labels_on=0;
	   labels_col_name=;
	   row_num=0;
	   axis_label=;
	  };
	  thresh=0.5;
	  thr_line_len=0.48;
	  matrix_mode=SEP_GRAPHS;
	  mat_layout=BOT_ZERO;
	  mat_odd_vert=1;
	  two_d_font=0;
	  two_d_font_scale=350;
	 };
	};
       };
       bg_color {r=1: g=1: b=1: a=1: };
       text_color {r=0: g=0: b=0: a=1: };
       headlight_on=1;
       headlight_intensity=1;
       ambient_light=0;
       camera_params {field_of_view=45: near_distance=0.1: focal=5: far_distance=1000: };
       stereo_view=STEREO_NONE;
       saved_views {
	name="saved_views";
	el_typ=T3SavedView;
	el_def=0;
	T3SavedView @[0] {
	 name="Vw_0";
	 view_saved=1;
	 pos {x=1.44355: y=0.491: z=1.619451: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=1.631951;
	};
	T3SavedView @[1] {
	 name="Vw_1";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[2] {
	 name="Vw_2";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[3] {
	 name="Vw_3";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[4] {
	 name="Vw_4";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[5] {
	 name="Vw_5";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[6] {
	 name="Vw_6";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[7] {
	 name="Vw_7";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[8] {
	 name="Vw_8";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
	T3SavedView @[9] {
	 name="Vw_9";
	 view_saved=0;
	 pos {x=0: y=0: z=0: };
	 orient {x=0: y=0: z=1: rot=0: };
	 focal_dist=0;
	};
       };
      };
     };
    };
   };
   docks {
    name="docks";
    el_typ=ToolBoxDockViewer;
    el_def=0;
    ToolBoxDockViewer @[0] {
     UserDataItem_List @*(.user_data_) {
      name=;
      el_typ=UserDataItem;
      el_def=0;
      UserDataItem @[0] {name="view_win_lft": value=0: val_type_fixed=0: };
      UserDataItem @[1] {name="view_win_top": value=0.03092784: val_type_fixed=0: };
      UserDataItem @[2] {name="view_win_wd": value=0.05694444: val_type_fixed=0: };
      UserDataItem @[3] {name="view_win_ht": value=0.6907216: val_type_fixed=0: };
      UserDataItem @[4] {name="view_win_iconified": value=0: val_type_fixed=0: };
      UserDataItem @[5] {name="view_visible": value=0: val_type_fixed=0: };
     };
     name="Tools";
     m_data=NULL;
     cur_font_size=12;
     visible=0;
     win_name=;
     dock_flags=DV_MOVABLE|DV_FLOATABLE;
     dock_area=1;
    };
   };
  };
 };
 save_view=1;
 save_as_only=0;
 auto_name=1;
 last_change_desc="Project updated on wiki: CCN changes: got rid of app toolbar";
 tree_state{ .;.docs;.wizards;.ctrl_panels;.ctrl_panels[0];.data;.data.gp[0];.data.gp[1];.data.gp[2];.programs;.programs.break_points;.programs[2];.programs[2].objs;.programs[2].objs_vars;.programs[2].types;.programs[2].args;.programs[2].vars;.programs[2].functions;.programs[2].init_code;.programs[2].prog_code;.programs[2].prog_code[0];.programs.gp[0];.programs.gp[1];.networks;.networks[0];.networks[0].specs;.networks[0].specs[3]; };
 networks {
  name="networks";
  el_typ=LeabraNetwork;
  el_def=0;
  LeabraNetwork @[0] {
   UserDataItem_List @*(.user_data_) {
    name=;
    el_typ=UserDataItem;
    el_def=0;
    UserDataItem @[0] {name="cos_err": value=1: val_type_fixed=1: };
    UserDataItem @[1] {name="norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[2] {name="ext_rew": value=1: val_type_fixed=1: };
    UserDataItem @[3] {name="minus_output_name": value=1: val_type_fixed=1: };
    UserDataItem @[4] {name="rt_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[5] {name="tot_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[6] {name="phase": value=1: val_type_fixed=1: };
    UserDataItem @[7] {name="quarter": value=1: val_type_fixed=1: };
    UserDataItem @[8] {name="sse": value=1: val_type_fixed=1: };
    UserDataItem @[9] {name="output_name": value=1: val_type_fixed=1: };
    UserDataItem @[10] {name="trial_name": value=1: val_type_fixed=1: };
    UserDataItem @[11] {name="group_name": value=1: val_type_fixed=1: };
    UserDataItem @[12] {name="total_trials": value=1: val_type_fixed=1: };
    UserDataItem @[13] {name="time": value=1: val_type_fixed=1: };
    UserDataItem @[14] {name="cycle": value=1: val_type_fixed=1: };
    UserDataItem @[15] {name="tick": value=1: val_type_fixed=1: };
    UserDataItem @[16] {name="trial": value=1: val_type_fixed=0: };
    UserDataItem @[17] {name="group": value=1: val_type_fixed=0: };
    UserDataItem @[18] {name="epoch": value=1: val_type_fixed=0: };
    UserDataItem @[19] {name="batch": value=1: val_type_fixed=0: };
    UserDataItem @[20] {name="trial_cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[21] {name="avg_act_diff": value=1: val_type_fixed=1: };
    UserDataItem @[22] {name="cos_diff": value=1: val_type_fixed=1: };
    UserDataItem @[23] {name="minus_cycles": value=1: val_type_fixed=1: };
    UserDataItem @[24] {name="ct_cycle": value=1: val_type_fixed=1: };
    UserDataItem @[25] {name="phase_no": value=1: val_type_fixed=1: };
    UserDataItem @[26] {name="maxda": value=1: val_type_fixed=1: };
    UserDataItem @[27] {name="lt_avg_norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[28] {name="st_avg_norm_err": value=1: val_type_fixed=1: };
    UserDataItem @[29] {name="lt_avg_ext_rew": value=1: val_type_fixed=1: };
    UserDataItem @[30] {name="st_avg_ext_rew": value=1: val_type_fixed=1: };
   };
   name="LayerNet";
   desc=;
   specs {
    name="specs";
    el_typ=BaseSpec;
    el_def=0;
    LeabraUnitSpec @[0] {
     name="UnitSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraUnitSpec;
      el_def=0;
     };
     act_range {min=0: max=1: range=1: scale=1: };
     bias_spec {type=LeabraBiasSpec: spec=.networks[0].specs[1].children[0]$$: };
     sse_tol=0.5;
     act_fun=NOISY_XX1;
     act {thr=0.5: gain=40: nvar=0.01: };
     act_misc {rec_nd=1: avg_nd=1: dif_avg=0: net_gain=1: act_max_hz=100: avg_trace=0: lambda=0: avg_tau=200: avg_init=0.15: avg_dt=0.005: };
     spike {rise=0: decay=5: g_gain=1: window=3: eq_gain=10: eq_tau=50: eq_dt=0.02: };
     spike_misc {ex=0: exp_slope=0.02: spk_thr=1.2: vm_r=0.3: t_r=0: clamp_max_p=0.12: clamp_type=REGULAR: eff_spk_thr=0.5: };
     opt_thresh {send=0.1: delta=0.005: xcal_lrn=0.01: };
     clamp_range {min=0: max=0.95: range=0.95: scale=1.052632: };
     vm_range {min=0: max=2: range=2: scale=0.5: };
     init {v_m=0.4: act=0: netin=0: };
     dt {integ=1: vm_tau=3.3: net_tau=1.4: fast_cyc=0: vm_dt=0.3030303: net_dt=0.7142857: };
     act_avg {ss_tau=2: s_tau=2: m_tau=10: m_in_s=0.1: ss_dt=0.5: s_dt=0.5: m_dt=0.1: s_in_s=0.9: };
     avg_l {init=0.4: gain=2.5: min=0.2: tau=10: lrn_max=0.5: lrn_min=0.0001: dt=0.1: lrn_fact=0.2173478: };
     avg_l_2 {err_mod=1: err_min=0.01: lay_act_thr=0.01: };
     g_bar {e=0.3: l=0.3: i=1: };
     e_rev {e=1: l=0.3: i=0.25: };
     adapt {on=1: tau=144: vm_gain=0.04: spike_gain=0.00805: Ei_dyn=0: Ei_gain=0.001: Ei_tau=50: dt=0.006944444: Ei_dt=0.02: };
     stp {on=0: algorithm=CYCLES: f_r_ratio=0.02: rec_tau=200: p0=0.2: p0_norm=0.2: kre_tau=100: kre=0.002: fac_tau=4: fac=0.3: thresh=0.5: n_trials=1: rec_prob=0.1: rec_dt=0.005: fac_dt=0.25: kre_dt=0.01: oneo_p0_norm=5: };
     syn_delay {on=0: delay=4: };
     deep_raw_qtr=Q4;
     deep {on=0: role=SUPER: raw_thr_rel=0.1: raw_thr_abs=0.1: mod_min=0.8: mod_thr=0.1: ctxt_prv=0: tick_updt=-1: else_prv=0.9: mod_range=0.2: ctxt_new=1: else_new=0.1: };
     trc {p_only_m=0: thal_gate=0: avg_clamp=0: deep_gain=0.2: clip=0: clip_max=0.4: std_gain=0.8: };
     da_mod {on=0: minus=0: plus=0.1: };
     noise_type=NETIN_NOISE;
     noise {name="noise": type=GAUSSIAN: mean=0: var=0: par=1: };
     noise_adapt {trial_fixed=0: mode=FIXED_NOISE: };
     noise_sched {
      name="noise_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=1;
     };
    };
    LeabraConSpec @[1] {
     name="ConSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ wt_limits;     };
     saved{      };
     children {
      name="children";
      el_typ=LeabraConSpec;
      el_def=0;
      LeabraBiasSpec @[0] {
       name="BiasSpec_0";
       is_used=1;
       used_status=USED;
       desc=;
       unique{ rnd;wt_limits;wt_scale;wt_scale_init;       };
       saved{        };
       children {
	name="children";
	el_typ=LeabraBiasSpec;
	el_def=0;
       };
       rnd {name="rnd": type=UNIFORM: mean=0: var=0: par=1: };
       wt_limits {type=NONE: min=-1: max=5: sym=0: sym_fm_top=0: };
       inhib=0;
       wt_scale {abs=1: rel=0.02: no_plus_net=0: };
       learn=0;
       learn_qtr=Q4;
       lrate=0;
       use_lrate_sched=1;
       cur_lrate=0;
       lrs_mult=1;
       lrate_sched {
	name="lrate_sched";
	el_typ=SchedItem;
	el_def=0;
	default_val=1;
	interpolate=0;
       };
       use_unlearnable=1;
       xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
       wt_sig {gain=6: off=1.25: soft_bound=1: };
       dynlr {dwt_norm=NO_NORM: norm_tau=1000: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=0.01: norm_dt=0.001: norm_dt_c=0.999: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
       wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
       adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
       slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
       deep {on=0: bg_lrate=1: fg_lrate=0: };
       margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
       dwt_thresh=0.1;
      };
     };
     rnd {name="rnd": type=UNIFORM: mean=1: var=0: par=1: };
     wt_limits {type=MIN_MAX: min=0: max=1: sym=0: sym_fm_top=0: };
     inhib=0;
     wt_scale {abs=1: rel=1: no_plus_net=0: };
     learn=0;
     learn_qtr=Q4;
     lrate=0;
     use_lrate_sched=1;
     cur_lrate=0;
     lrs_mult=1;
     lrate_sched {
      name="lrate_sched";
      el_typ=SchedItem;
      el_def=0;
      default_val=1;
      interpolate=0;
     };
     use_unlearnable=1;
     xcal {m_lrn=1: set_l_lrn=0: l_lrn=1: d_rev=0.1: d_thr=0.0001: d_rev_ratio=-9: };
     wt_sig {gain=6: off=1.25: soft_bound=1: };
     dynlr {dwt_norm=NO_NORM: norm_tau=1000: norm_min=0.001: moment=NO_MOMENT: m_tau=10: s_tau=50: l_tau=2: xx1=1: gain=2: lrate_comp=0.01: norm_dt=0.001: norm_dt_c=0.999: m_dt=0.1: m_dt_c=0.9: s_dt=0.02: l_dt=0.5: };
     wt_bal {on=0: hi_thr=0.4: hi_gain=4: lo_thr=0.2: lo_gain=4: };
     adapt_scale {on=0: tau=5000: lo_thr=0.25: hi_thr=0.75: lo_scale=0.01: hi_scale=2: dt=0.0002: };
     slow_wts {on=0: swt_pct=0.8: slow_tau=100: wt_tau=1: fwt_pct=0.2: slow_dt=0.01: wt_dt=1: };
     deep {on=0: bg_lrate=1: fg_lrate=0: };
     margin {lrate_mod=0: stable_lrate=0.5: sign_dwt=0: sign_lrn=0.5: };
    };
    LeabraLayerSpec @[2] {
     name="LayerSpec_0";
     is_used=1;
     used_status=USED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=LeabraLayerSpec;
      el_def=0;
     };
     lay_inhib {on=1: gi=0.4: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     unit_gp_inhib {on=0: gi=0: ff=1: fb=0.5: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     multi_gp_geom {size={x=3: y=3: }: st_off={x=-1: y=-1: }: sub_size={x=1: y=1: }: wrap=1: };
     lay_gp_inhib {on=0: gi=1.8: ff=1: fb=1: fb_tau=1.4: max_vs_avg=0: ff0=0.1: fb_dt=0.7142857: };
     avg_act {targ_init=0.2: fixed=1: use_ext_act=0: use_first=1: tau=100: adjust=1: dt=0.01: };
     inhib_adapt {on=0: tol_pct=0.25: trial_interval=100: tau=200: dt=0.005: };
     inhib_misc {net_thr=0: thr_rel=1: self_fb=0: self_tau=1.4: fb_up_immed=0: self_dt=0.7142857: };
     clamp {hard=0: gain=0.5: avg=0: avg_gain=0.2: };
     decay {trial=1: };
     del_inhib {on=0: prv_trl=0.1: prv_q=0: };
     margin {pct_marg=0.3: avg_tau=100: adapt_tau=500: tol_pct=0.25: avg_act=0.8: low_thr=0.501: med_thr=0.506: hi_thr=0.508: avg_dt=0.01: adapt_dt=0.002: };
     lay_lrate=1;
     cos_diff {avg_tau=100: lrate_mod=0: lrmod_fm_trc=0: lrmod_z_thr=-1.5: set_net_unlrn=0: avg_dt=0.01: avg_dt_c=0.99: };
     lstats {hog_thr=0.3: dead_thr=0.01: };
    };
    OneToOnePrjnSpec @[3] {
     name="OneToOnePrjnSpec_1";
     is_used=1;
     used_status=USED;
     desc=;
     unique{ self_con;     };
     saved{      };
     children {
      name="children";
      el_typ=OneToOnePrjnSpec;
      el_def=0;
     };
     self_con=1;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
     n_conns=-1;
     recv_start=0;
     send_start=0;
     use_gp=0;
    };
    FullPrjnSpec @[4] {
     name="specs_4";
     is_used=0;
     used_status=UNUSED;
     desc=;
     unique{      };
     saved{      };
     children {
      name="children";
      el_typ=FullPrjnSpec;
      el_def=0;
     };
     self_con=0;
     init_wts=0;
     set_scale=0;
     init_wt_val=1;
     add_rnd_var=0;
     renorm_wts {on=0: mult_norm=1: avg_wt=0.5: };
    };
   };
   param_seqs {
    name="param_seqs";
    el_typ=ParamSeq;
    el_def=0;
   };
   layers {
    name="layers";
    el_typ=LeabraLayer;
    el_def=0;
    pos {x=0: y=0: z=0: };
    pos2d {x=0: y=0: };
    max_disp_size {x=10: y=1: z=2: };
    max_disp_size2d {x=10: y=4: };
    LeabraLayer @[0] {
     name="Input";
     desc=;
     flags=0;
     layer_type=INPUT;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=0: };
     pos_abs {x=0: y=0: z=0: };
     pos2d {x=0: y=0: };
     pos2d_abs {x=0: y=0: };
     disp_scale=1;
     un_geom {x=10: y=1: n_not_xy=0: n=10: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=1: n_not_xy=0: n=10: };
     disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     scaled_disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     n_recv_prjns=0;
     n_send_prjns=1;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
      Projection_Group @. = [0] = LeabraPrjn .networks[0].layers[1].projections[0];
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=0: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=.networks[0].specs[2]$$: };
     adapt_gi=1;
     margin_low_thr=0.501;
     margin_med_thr=0.506;
     margin_hi_thr=0.508;
     margin_low_avg=0.2475;
     margin_med_avg=0.037125;
     margin_hi_avg=0.17325;
     twod_vals {
      name="twod_vals";
     };
    };
    LeabraLayer @[1] {
     name="Receiver";
     desc=;
     flags=0;
     layer_type=HIDDEN;
     pos_rel {rel=ABS_POS: other=NULL: x_align=LEFT: x_off=0: y_align=FRONT: y_off=0: space=2: };
     pos {x=0: y=0: z=1: };
     pos_abs {x=0: y=0: z=1: };
     pos2d {x=0: y=3: };
     pos2d_abs {x=0: y=3: };
     disp_scale=1;
     un_geom {x=10: y=1: n_not_xy=0: n=10: };
     unit_groups=0;
     virt_groups=1;
     gp_geom {x=1: y=1: n_not_xy=0: n=1: };
     gp_spc {x=0: y=0: };
     flat_geom {x=10: y=1: n_not_xy=0: n=10: };
     disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     scaled_disp_geom {x=10: y=1: n_not_xy=0: n=10: };
     n_recv_prjns=1;
     n_send_prjns=0;
     projections {
      name="projections";
      el_typ=LeabraPrjn;
      el_def=0;
      LeabraPrjn @[0] {
       name="Fm_Input";
       off=0;
       disp=1;
       notes=;
       from_type=CUSTOM;
       from=.networks[0].layers[0]$$;
       spec {type=OneToOnePrjnSpec: spec=.networks[0].specs[3]$$: };
       con_type=LeabraCon;
       con_spec {type=LeabraConSpec: spec=.networks[0].specs[1]$$: };
       recv_idx=0;
       send_idx=0;
       recv_n=1;
       send_n=1;
       projected=1;
       dir_fixed=0;
       direction=FM_INPUT;
       prjn_clr {r=1: g=0.9: b=0.5: a=1: };
      };
     };
     send_prjns {
      name="send_prjns";
      el_typ=LeabraPrjn;
      el_def=0;
     };
     units {
      name="units";
      el_typ=LeabraUnit;
      el_def=0;
      pos {x=0: y=0: z=0: };
      output_name=;
     };
     unit_spec {type=LeabraUnitSpec: spec=$.networks[0].specs[0]$: };
     dist {fm_input=1: fm_output=-1: };
     units_lesioned=0;
     gp_unit_names_4d=0;
     brain_area=;
     voxel_fill_pct=1;
     acts_m_avg=0.2;
     acts_p_avg=0.2;
     acts_p_avg_eff=0.2;
     spec {type=LeabraLayerSpec: spec=$.networks[0].specs[2]$: };
     adapt_gi=1;
     margin_low_thr=0.501;
     margin_med_thr=0.506;
     margin_hi_thr=0.508;
     margin_low_avg=0.2475;
     margin_med_avg=0.037125;
     margin_hi_avg=0.17325;
     twod_vals {
      name="twod_vals";
     };
    };
   };
   weights {
    name="weights";
    el_typ=Weights;
    el_def=0;
   };
   flags=BUILD_INIT_WTS;
   unit_vars_type=LeabraUnitVars;
   con_group_type=LeabraConGroup;
   auto_build=AUTO_BUILD;
   auto_load_wts=NO_AUTO_LOAD;
   auto_load_file=;
   brain_atlas_name=;
   train_mode=TRAIN;
   wt_update=ON_LINE;
   small_batch_n=10;
   stats {sse_unit_avg=0: sse_sqrt=0: cnt_err_tol=0: prerr=0: };
   threads {run_time={name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: sync_time={name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: total_time={name="": s_used=0: n_used=0: avg_used={avg=0: sum=0: n=0: }: }: n_wake_in_sync=0: run_time_pct=0: sync_time_pct=0: wake_in_sync_pct=6.169293311314099e-71: };
   cuda {sync_units=0: sync_cons=0: min_threads=32: max_threads=1024: cons_per_thread=2: timers_on=0: n_threads=32: };
   usr1_save_fmt=FULL_NET;
   wt_save_fmt=TEXT;
   n_units=21;
   n_cons=10;
   max_prjns=1;
   max_disp_size {x=10: y=1: z=2: };
   max_disp_size2d {x=10: y=4: };
   times {quarter=1: deep_cyc=5: time_inc=0.001: wt_bal_int=10: minus=3: plus=1: total_cycles=4: thal_gate_cycle=-2: };
   lstats {trg_max_act_crit=0.5: off_errs=1: on_errs=1: agg_unlearnable=0: wt_bal=0: };
   net_misc {spike=0: deep=0: bias_learn=0: trial_decay=1: diff_scale_p=0: diff_scale_q1=0: wt_bal=0: lay_gp_inhib=0: inhib_cons=0: };
   deep {on=0: ctxt=0: raw_net=0: mod_net=0: raw_qtr=0: };
   rel_netin {on=1: trl_skip=10: epc_skip=10: };
  };
 };
};
